Search.setIndex({"docnames": ["Contribution", "code/modules", "code/vclibpy", "code/vclibpy.algorithms", "code/vclibpy.components", "code/vclibpy.components.compressors", "code/vclibpy.components.expansion_valves", "code/vclibpy.components.heat_exchangers", "code/vclibpy.components.heat_exchangers.heat_transfer", "code/vclibpy.flowsheets", "code/vclibpy.media", "code/vclibpy.utils", "examples/e1_refrigerant_data", "examples/e2_compressor", "examples/e3_inputs_and_flowsheet_state", "examples/e4_heat_exchanger", "examples/e5_expansion_valve", "examples/e6_simple_heat_pump", "examples/e7_vapor_injection", "index", "version_his"], "filenames": ["Contribution.md", "code/modules.rst", "code/vclibpy.rst", "code/vclibpy.algorithms.rst", "code/vclibpy.components.rst", "code/vclibpy.components.compressors.rst", "code/vclibpy.components.expansion_valves.rst", "code/vclibpy.components.heat_exchangers.rst", "code/vclibpy.components.heat_exchangers.heat_transfer.rst", "code/vclibpy.flowsheets.rst", "code/vclibpy.media.rst", "code/vclibpy.utils.rst", "examples/e1_refrigerant_data.md", "examples/e2_compressor.md", "examples/e3_inputs_and_flowsheet_state.md", "examples/e4_heat_exchanger.md", "examples/e5_expansion_valve.md", "examples/e6_simple_heat_pump.md", "examples/e7_vapor_injection.md", "index.rst", "version_his.rst"], "titles": ["Contribute as a user", "vclibpy", "vclibpy package", "vclibpy.algorithms package", "vclibpy.components package", "vclibpy.components.compressors package", "vclibpy.components.expansion_valves package", "vclibpy.components.heat_exchangers package", "vclibpy.components.heat_exchangers.heat_transfer package", "vclibpy.flowsheets package", "vclibpy.media package", "vclibpy.utils package", "Refrigerant Data Example", "Compressor Example", "Inputs and FlowsheetState", "Heat Exchanger Example", "Expansion Valve Example", "Example for a heat pump with a standard cycle", "Example for a heat pump with vapor injection using a phase separator", "About vcliby", "Version History"], "terms": {"The": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "exampl": [0, 2, 5, 10, 11, 14, 19], "tutori": [0, 19], "should": [0, 10, 11, 14, 15, 16, 17], "understand": [0, 12, 14, 15], "code": [0, 2, 7, 10, 14, 17, 19], "bug": [0, 10], "free": [0, 8, 18], "As": [0, 8, 14, 15, 17, 18], "all": [0, 2, 3, 5, 9, 10, 11, 12, 14, 15, 17, 18], "": [0, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18], "have": [0, 2, 5, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "differ": [0, 2, 3, 5, 7, 8, 9, 10, 11, 13, 14, 15, 16, 19], "background": 0, "you": [0, 2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "mai": [0, 2, 6, 7, 9, 10, 11, 12, 13, 14, 15, 19], "everyth": [0, 10, 17, 18], "encount": 0, "In": [0, 5, 9, 10, 11, 14, 15, 17, 19], "case": [0, 5, 10, 11, 14, 15], "pleas": [0, 11, 19], "rais": [0, 2, 3, 8, 10, 11, 19], "an": [0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19], "issu": [0, 11, 19], "here": [0, 7, 8, 9, 12, 13, 14, 17, 19], "consid": [0, 11], "label": [0, 11], "us": [0, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19], "flag": [0, 10], "question": 0, "If": [0, 2, 3, 5, 8, 9, 10, 11, 13, 14, 15, 17, 19], "instead": [0, 10, 11, 15, 18], "want": [0, 10, 13, 14, 15, 16], "new": [0, 2, 10, 11], "featur": 0, "fix": [0, 10], "yourself": 0, "we": [0, 9, 12, 13, 14, 15, 16, 17, 18, 19], "ar": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "more": [0, 7, 8, 9, 11, 15, 18], "than": [0, 3, 15, 16], "happi": 0, "also": [0, 2, 13, 15, 16, 17, 18], "creat": [0, 3, 10, 11, 12, 18], "branch": 0, "issuexy_some_nam": 0, "xy": 0, "i": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20], "number": [0, 3, 5, 7, 8, 10, 12], "your": [0, 2, 5, 9, 14, 16], "some_nam": 0, "meaing": 0, "descript": [0, 1, 2, 10, 11, 14, 17], "onc": 0, "re": [0, 8], "readi": 0, "pull": 0, "request": 0, "check": [0, 7, 8, 10, 13, 14, 15, 16, 19], "pipelin": 0, "succe": 0, "assign": [0, 15], "review": 0, "befor": [0, 9, 13], "merg": [0, 11], "finish": 0, "can": [0, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "implement": [0, 7, 8, 10, 11, 14, 16, 20], "modifi": [0, 5], "modul": [0, 1, 12, 17, 18, 19], "class": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20], "function": [0, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 20], "read": 0, "follow": [0, 7, 10, 11, 15, 19], "page": [0, 19], "pep8": 0, "some": [0, 2, 3, 10, 12, 13, 14, 16, 17, 18], "id": [0, 17], "like": [0, 2, 11, 13, 14, 17, 18], "pycharm": [0, 17], "automat": [0, 5, 11, 13, 14], "show": [0, 11, 12, 13, 15, 16, 17, 19], "don": [0, 17], "t": [0, 1, 2, 3, 5, 7, 10, 11, 12, 13, 15, 17], "thi": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "get": [0, 1, 2, 4, 5, 10, 12, 14, 17, 18], "better": [0, 12, 15], "properli": [0, 10], "try": [0, 12], "structur": [0, 11], "alreadi": 0, "present": [0, 9], "possibl": [0, 6, 7, 8, 9, 10, 12, 15, 20], "write": 0, "littl": 0, "doctest": 0, "docstr": [0, 9], "make": [0, 14], "clear": 0, "what": [0, 2, 15, 16, 17], "desir": [0, 14], "output": [0, 4, 5, 6, 9, 14], "non": [0, 12], "self": [0, 5, 10, 14], "explanatori": 0, "line": [0, 10], "includ": [0, 5, 9, 10, 11, 12, 17, 18], "comment": 0, "style": 0, "e": [0, 2, 7, 8, 9, 10, 11, 12, 14, 18, 19], "g": [0, 2, 7, 8, 9, 10, 11, 12, 14, 18], "def": [0, 14], "foo": 0, "dummi": [0, 13, 16, 18], "dummy2": 0, "describ": [0, 15], "doe": [0, 10, 13, 17, 18], "blank": 0, "below": 0, "necessari": [0, 3, 10, 14], "doc": [0, 7, 15, 19], "render": 0, "nice": 0, "arg": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11], "str": [0, 2, 3, 5, 7, 8, 9, 10, 11], "ani": [0, 2, 11, 12, 13, 14, 15], "paramet": [0, 2, 3, 5, 8, 9, 11, 13, 15, 16, 18, 20], "int": [0, 3, 8, 10, 12], "float": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14], "A": [0, 2, 4, 6, 7, 8, 10, 11, 15, 16, 17, 18], "variabl": [0, 1, 2, 7, 8, 9, 10, 11, 14, 15, 17], "two": [0, 2, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19], "type": [0, 2, 5, 7, 11, 12, 14], "espaci": 0, "when": [0, 2, 10, 14], "add": [0, 2, 10, 14, 20], "open": [0, 6, 10, 15, 17], "test_modul": 0, "py": [0, 11, 19], "file": [0, 2, 5, 10, 11, 17, 18, 19], "directori": [0, 10, 11], "testmodul": 0, "name": [0, 1, 2, 5, 7, 8, 9, 10, 11, 14, 17], "test_my_new_funct": 0, "test_my_new_modul": 0, "exist": [0, 17, 19], "other": [0, 2, 11, 13, 14, 17, 18, 19], "familiar": [0, 12], "quick": [0, 3], "summari": [0, 5], "mani": 0, "thing": [0, 13], "even": [0, 10], "seemingli": 0, "silli": 0, "correct": [0, 6, 8, 9, 10, 17], "input": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 20], "format": [0, 2, 5, 10, 12, 14, 17], "help": [0, 12, 13, 15, 16, 17, 18, 19], "prevent": 0, "futur": [0, 14, 15], "problem": 0, "assertsometh": 0, "provid": [0, 2, 5, 10, 11, 14], "unittest": 0, "wai": [0, 14], "failur": 0, "correctli": 0, "error": [0, 3, 7, 10, 11, 15], "insid": [0, 7, 8, 15], "handel": 0, "success": 0, "depend": [0, 2, 7, 10, 14, 17], "devic": [0, 15], "decor": 0, "skip": 0, "skipif": 0, "numpi": [0, 10, 11, 13, 15, 16], "__version__": 0, "1": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "0": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "support": [0, 7, 10, 11, 19, 20], "version": [0, 19], "etc": [0, 10, 12, 14], "setup": [0, 3], "teardown": 0, "call": [0, 10, 12], "after": [0, 2, 9, 12, 13], "each": [0, 2, 9, 11, 12, 13, 14], "defin": [0, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 17], "everi": 0, "close": [0, 9, 12, 15], "applic": [0, 19], "dymola": 0, "complet": [0, 17], "see": [0, 6, 7, 9, 10, 11, 13, 15, 17, 18], "further": [0, 3, 8, 9, 10, 12, 14, 15, 18], "inform": [0, 10, 11, 12, 14], "work": [0, 4, 10, 11, 12, 13, 14, 15, 20], "run": [0, 9, 11, 18, 19], "commit": 0, "git": [0, 19], "With": [0, 12, 15], "keep": [0, 15], "our": [0, 15, 17, 19], "clean": 0, "repo": [0, 19], "how": [0, 12, 13, 14, 15, 16, 17, 18], "packag": [1, 13, 15, 16, 19], "subpackag": 1, "algorithm": [1, 2, 11, 17, 18, 20], "submodul": 1, "base": [1, 2, 4, 5, 6, 7, 8, 10, 11, 15, 20], "fsolv": [1, 2], "iter": [1, 2, 7, 9, 10, 11, 14, 16], "compon": [1, 2, 9, 10, 12, 13, 14, 15, 16, 17, 18], "phase_separ": [1, 2], "flowsheet": [1, 2, 3, 5, 7, 8, 11, 14, 17, 18, 19], "ihx": [1, 2], "standard": [1, 2, 15, 18], "vapor_inject": [1, 2, 18], "vapor_injection_econom": [1, 2, 18], "vapor_injection_phase_separ": [1, 2], "media": [1, 2, 7, 9, 12, 13, 15, 16], "coolprop": [1, 2, 10, 12, 13, 15, 16, 19], "medprop": [1, 2, 4, 8, 10, 11, 12], "refprop": [1, 2, 12, 19], "thermodynamicst": [1, 2, 4, 7, 8, 9, 10, 11], "transportproperti": [1, 2, 7, 8, 10], "cool_prop": [1, 2, 12], "ref_prop": [1, 2], "state": [1, 2, 3, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 19], "util": [1, 2, 4, 5, 17, 18, 20], "autom": [1, 2, 20], "interactive_visu": [1, 2], "nominal_design": [1, 2], "plot": [1, 2, 3, 7, 9, 10, 13, 14, 16, 17, 18], "print": [1, 2, 12, 13, 14, 15, 16, 17], "sdf_": [1, 2], "ten_coefficient_compressor_reqress": [1, 2], "datamodel": [1, 3, 7, 14], "condenserpowercontrol": [1, 2, 14], "controlinput": [1, 2, 14], "flowsheetst": [1, 2, 3, 5, 7, 8, 9, 13, 15], "heatexchangerinput": [1, 2, 15], "get_all_input": [1, 2], "add_inputs_to_fs_st": [1, 2], "get_nam": [1, 2], "relativecompressorspeedcontrol": [1, 2, 13, 14, 15], "unit": [1, 2, 7, 10, 11, 14, 17, 19], "valu": [1, 2, 3, 5, 7, 10, 11, 12, 13, 14, 15, 17], "variablecontain": [1, 2], "convert_to_str_value_format": [1, 2], "copi": [1, 2, 10, 14], "get_variable_nam": [1, 2, 14], "get_vari": [1, 2, 14], "item": [1, 2, 14], "items_not_non": [1, 2], "set": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 13, 14, 15, 17, 18], "stationari": 2, "vapor": [2, 3, 4, 5, 7, 9, 10, 12, 13, 14, 16], "compress": [2, 3, 4, 5, 12, 13, 14, 16], "model": [2, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18], "analysi": [2, 7], "calc_steady_st": [2, 3, 20], "get_improved_start_condensing_pressur": [2, 3], "initial_setup": [2, 3], "compressor": [2, 4, 9, 12, 14, 17, 18, 19], "constant_effectiv": [2, 4], "rotari": [2, 4], "ten_coeffici": [2, 4], "expansion_valv": [2, 4, 9, 16, 17, 18], "bernoulli": [2, 4, 16, 17, 18], "heat_exchang": [2, 4, 15, 17, 18], "econom": [2, 4, 9, 19], "ihx_ntu": [2, 4, 9], "moving_boundary_tm": [2, 4], "moving_boundary_ntu": [2, 4, 17, 18], "ntu": [2, 4, 15], "basecompon": [2, 4, 9], "med_prop": [2, 4, 7, 8, 10, 11, 13, 15, 16], "fourportcompon": [2, 4, 7], "m_flow_high": [2, 4], "m_flow_low": [2, 4], "state_inlet_high": [2, 4], "state_inlet_low": [2, 4], "state_outlet_high": [2, 4], "state_outlet_low": [2, 4], "twoportcompon": [2, 4, 5, 6, 7], "m_flow": [2, 4, 5, 6, 7, 8, 13, 14, 15, 16], "state_inlet": [2, 4, 8, 13, 15, 16], "state_outlet": [2, 4, 8, 13, 15, 16], "phasesepar": [2, 4], "state_outlet_liquid": [2, 4], "state_outlet_vapor": [2, 4], "basecycl": [2, 3, 9, 11, 17], "add_all_states_to_fs_st": [2, 9], "calc_electrical_pow": [2, 4, 5, 9, 13], "calc_stat": [2, 9, 10, 12, 13, 15, 16], "calculate_cycle_for_pressur": [2, 9], "calculate_outputs_for_valid_pressur": [2, 9], "flowsheet_nam": [2, 9, 11], "get_all_compon": [2, 9], "get_start_condensing_pressur": [2, 9], "get_start_evaporating_pressur": [2, 9], "get_states_in_order_for_plot": [2, 9], "plot_cycl": [2, 9, 11, 20], "set_condenser_outlet_based_on_subcool": [2, 9], "set_evaporator_outlet_based_on_superh": [2, 9], "setup_new_fluid": [2, 9], "termin": [2, 9, 10], "fill_fs_state_from_input": [2, 9], "fluid": [2, 3, 4, 7, 8, 9, 10, 11, 12, 17, 18], "set_ihx_outlet_based_on_superh": [2, 9], "standardcycl": [2, 9, 17], "basevaporinject": [2, 9], "calc_inject": [2, 9], "vaporinjectioneconom": [2, 9, 18], "vaporinjectionphasesepar": [2, 9, 18], "calc_transport_properti": [2, 10, 12], "get_critical_point": [2, 10, 12], "get_molar_mass": [2, 10], "calc_mean_transport_properti": [2, 10], "get_two_phase_limit": [2, 10, 12, 15], "calc_satliq_st": [2, 10], "get_available_subst": [2, 10], "get_comp_nam": [2, 10], "get_def_limit": [2, 10], "get_dll_path": [2, 10], "get_fluid_nam": [2, 10], "get_gwp": [2, 10], "get_longnam": [2, 10], "get_mass_fract": [2, 10], "get_mol_fract": [2, 10], "get_molar_composit": [2, 10], "get_nbp": [2, 10], "get_odp": [2, 10], "get_safeti": [2, 10], "get_sat_vap_pressur": [2, 10], "get_triple_point": [2, 10], "get_vers": [2, 10], "is_mixtur": [2, 10], "set_error_flag": [2, 10], "set_warning_flag": [2, 10], "get_pretty_print": [2, 10, 12], "calc_multiple_st": [2, 11], "full_factorial_map_gener": [2, 11, 17, 18], "plot_sdf_map": [2, 11, 17], "set_axis_styl": [2, 11], "print_stat": [2, 11], "merge_sdf": [2, 11], "save_to_sdf": [2, 11], "sdf_to_csv": [2, 11], "which": [2, 3, 5, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19], "contain": [2, 3, 9, 10, 11, 12, 15, 17], "librari": 2, "q_con": [2, 14], "dt_eva_superh": [2, 11, 14, 15, 17, 18], "dt_con_subcool": [2, 11, 14, 15, 17, 18], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 15], "control": [2, 9, 13, 15], "machin": [2, 14], "condens": [2, 3, 5, 7, 9, 11, 12, 14, 15, 17, 18], "heat": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 19, 20], "flow": [2, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16], "rate": [2, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16], "furthermor": 2, "superh": [2, 5, 7, 9, 10, 11], "subcool": [2, 5, 7, 9, 10, 11, 12, 14, 15], "level": [2, 5, 6, 9, 10, 11, 12, 14, 15, 16, 17, 18], "must": [2, 5, 9, 11, 14], "specifi": [2, 3, 10, 11, 13, 14, 16, 17, 18], "w": [2, 5, 8, 10], "super": [2, 13, 14], "evapor": [2, 3, 5, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18], "k": [2, 3, 5, 7, 8, 10, 12, 15], "abc": [2, 3, 4, 5, 6, 7, 8, 9, 10], "abstract": [2, 3, 4, 6, 7, 8, 9, 10], "determin": [2, 10], "oper": [2, 15], "condit": [2, 9, 14], "cycl": [2, 3, 4, 5, 7, 9, 10, 11, 12, 14, 15, 18], "speed": [2, 5, 11, 13, 14], "superheat": [2, 9, 12, 14, 15, 16], "uniqu": 2, "pump": [2, 8, 9, 11, 15, 19], "dynam": [2, 8, 10, 15], "sens": [2, 15], "attribut": 2, "ad": [2, 10, 13], "dure": [2, 3, 7, 11, 14], "calcul": [2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16], "enabl": [2, 10, 15, 19], "easi": 2, "custom": [2, 10, 11, 14], "analyz": [2, 11, 14, 17, 18], "whole": [2, 13], "restrict": 2, "certain": [2, 9, 14, 15], "convent": 2, "t_in": [2, 14, 15], "none": [2, 3, 5, 7, 10, 11, 13], "t_out": [2, 14], "dt": [2, 3, 14, 15], "t_ambient": [2, 14], "exchang": [2, 3, 7, 8, 9, 12, 14, 18, 19, 20], "note": [2, 8, 12, 13, 15, 16, 17, 18], "presuppos": [2, 14], "equat": [2, 8, 14], "q": [2, 7, 10, 12, 14, 15], "cp": [2, 7, 10, 14], "ab": [2, 14], "satisfi": [2, 14], "For": [2, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19], "current": [2, 10, 11, 14, 15, 16, 17, 18, 19], "least": [2, 13, 14, 15], "argument": [2, 5, 6, 7, 8, 13, 14, 17], "alwai": [2, 8, 9, 12, 13, 14, 15], "either": [2, 14, 17, 19], "absolut": [2, 5, 14], "temperatur": [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17], "mass": [2, 4, 5, 6, 8, 9, 10, 11, 14, 15, 16], "option": [2, 5, 7, 8, 10, 11, 12, 14, 15, 20], "secondari": [2, 7, 14, 15], "side": [2, 4, 7, 8, 9, 15], "inlet": [2, 3, 4, 7, 8, 9, 11, 13, 14, 15, 16, 17], "outlet": [2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 17], "between": [2, 5, 6, 7, 8, 10], "kg": [2, 5, 6, 10, 11, 12, 13], "ambient": 2, "default": [2, 3, 5, 7, 9, 10, 11, 14, 15, 17], "mean": [2, 5, 15], "properti": [2, 4, 5, 7, 8, 10, 11, 12, 13, 15], "return": [2, 3, 4, 5, 6, 7, 8, 9, 11], "tupl": [2, 7, 9, 10, 11], "given": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], "both": [2, 7, 11, 15], "onli": [2, 3, 4, 5, 7, 10, 11, 12, 14, 15, 16], "cannot": 2, "due": [2, 10, 13], "insuffici": 2, "valueerror": [2, 10], "capac": [2, 5, 7, 10], "medium": [2, 7, 8, 11, 15], "j": [2, 10, 12, 19], "object": [2, 3, 8, 9, 10, 11, 14], "act": [2, 14], "wrapper": [2, 4, 7], "requir": [2, 3, 5, 7, 9, 11, 12, 13, 14, 15, 16], "choic": 2, "adjust": [2, 3, 10, 15], "steadi": [2, 3, 9, 11, 14, 15, 19], "fs_state": [2, 3, 5, 7, 8, 9, 13, 14, 15], "round": [2, 5, 10], "n": [2, 5, 10, 11, 13, 14, 17, 18], "rel": [2, 5, 13], "numer": 2, "measur": 2, "hold": [2, 5, 15], "anywher": 2, "addit": [2, 10, 14, 18], "with_unit_and_descript": [2, 11], "bool": [2, 3, 10, 11], "dict": [2, 5, 10, 11, 14], "dictionari": [2, 5, 10, 11], "handi": 2, "store": [2, 11, 14, 15, 17, 18], "result": [2, 5, 9, 11, 13, 14, 15, 16, 17, 18], "csv": [2, 11, 14, 17, 18, 20], "xlsx": [2, 11], "fals": [2, 3, 10, 11, 17, 18], "string": [2, 10], "deepcopi": 2, "instanc": [2, 3, 7, 9, 10, 12, 14], "mutabl": [2, 14], "found": [2, 11, 18], "list": [2, 5, 9, 10, 11, 12, 17, 19], "from": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "where": [2, 5, 10, 11], "updat": [2, 11], "kwarg": [3, 5, 6, 7, 8, 9, 11, 14], "max_err": 3, "maximum": [3, 7, 10, 12], "allow": [3, 8], "percent": 3, "5": [3, 9, 10, 11, 13, 16, 17, 18], "save_path_plot": [3, 9], "pathlib": [3, 11], "path": [3, 5, 10, 11, 17, 18], "save": [3, 7, 9, 11, 14, 17, 18, 20], "dt_eva_start_guess": 3, "initi": [3, 9, 10], "guess": [3, 9, 11], "dt_pinch_eva_guess": 3, "pinch": [3, 9], "point": [3, 5, 9, 10, 11, 12, 15, 16], "dt_con_start_guess": 3, "dt_pinch_con_guess": 3, "improve_first_condensing_guess": 3, "improv": [3, 20], "pressur": [3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18], "scipi": [3, 5], "good": [3, 15], "p_min": [3, 10, 12], "minim": [3, 7, 11], "ensur": [3, 15], "p": [3, 7, 9, 10, 11, 12, 15, 19], "time": [3, 10, 13, 15], "10000": [3, 12, 15], "raise_error": [3, 11], "true": [3, 10, 11, 15, 17, 18], "solv": [3, 15], "just": [3, 8, 12, 13, 14, 17, 18], "perform": [3, 11, 14, 17, 18], "assumpt": [3, 7, 8, 12, 15, 16, 18], "repres": [3, 10], "occur": [3, 11], "log": [3, 12, 17, 18], "m_flow_guess": 3, "p_2_guess": 3, "p_1_start": 3, "start": [3, 9, 10, 11, 12, 15, 16, 17], "p_1": [3, 9, 14], "p_2_start": 3, "p_2": [3, 9, 14], "p_max": [3, 12], "maxim": [3, 5, 15], "critic": [3, 10, 12], "approach": [3, 8, 9, 15], "min_iteration_step": [3, 15], "minimum": [3, 7, 10, 12], "step": [3, 10, 15], "size": [3, 7, 10, 15, 17, 18], "show_iter": 3, "whether": [3, 10, 17], "displai": [3, 11], "progress": 3, "use_quick_solv": 3, "solver": [3, 17, 18], "min_allowed_dt_min": 3, "01": [3, 15, 16], "relev": [3, 9, 10, 12, 13], "combin": [3, 11], "bigger": 3, "lower": [3, 7, 9, 10, 15, 17], "won": 3, "too": 3, "big": 3, "larger": [3, 18], "zero": [3, 15], "area": [3, 6, 7, 8, 15, 16], "ha": [3, 5, 13, 14, 16], "impact": [3, 17], "max_num_iter": 3, "step_max": 3, "take": 3, "calc_m_flow": [4, 5, 13], "calc_state_outlet": [4, 5, 13], "get_eta_isentrop": [4, 5], "get_eta_mech": [4, 5], "get_lambda_h": [4, 5], "get_n_absolut": [4, 5], "get_p_outlet": [4, 5], "constanteffectivenesscompressor": [4, 5, 13], "rotarycompressor": [4, 5, 13, 17, 18], "basetencoefficientcompressor": [4, 5], "get_paramet": [4, 5], "datasheetcompressor": [4, 5], "tencoefficientcompressor": [4, 5, 13, 20], "calc_ten_coeffici": [4, 5], "linear_interpolate_extrapol": [4, 5], "calc_m_flow_at_open": [4, 6], "calc_opening_at_m_flow": [4, 6, 16], "calc_outlet_pressure_at_m_flow_and_open": [4, 6], "expansionvalv": [4, 6, 9, 16], "calc_outlet": [4, 6, 16], "heat_transf": [4, 7, 15, 17, 18], "air_to_wal": [4, 7], "constant": [4, 5, 7, 9, 13, 15, 17, 18], "pipe_to_wal": [4, 7], "vdi_atlas_air_to_wal": [4, 7], "vdi_atlas_plate_h": [4, 7], "wall": [4, 7, 15, 17, 18], "vaporinjectioneconomizerntu": [4, 7, 9, 18], "calc": [4, 7, 8, 9, 15], "calc_alpha_secondari": [4, 7], "calc_transport_properties_secondary_medium": [4, 7], "set_secondary_cp": [4, 7], "start_secondary_med_prop": [4, 7, 15], "state_two_phase_inlet": [4, 7], "state_two_phase_outlet": [4, 7], "terminate_secondary_med_prop": [4, 7], "externalheatexchang": [4, 7, 9], "calc_q_flow": [4, 7, 15], "calc_alpha_ga": [4, 7], "calc_alpha_liquid": [4, 7], "calc_alpha_two_phas": [4, 7], "calc_secondary_q_flow": [4, 7], "calc_secondary_cp": [4, 7, 15], "cp_secondari": [4, 7], "m_flow_secondari": [4, 7], "m_flow_secondary_cp": [4, 7], "heatexchang": [4, 7, 9], "calc_k": [4, 7], "calc_wall_heat_transf": [4, 7], "internalheatexchang": [4, 7], "set_missing_st": [4, 7], "movingboundarytmcondens": [4, 7], "movingboundarytmevapor": [4, 7], "movingboundaryntucondens": [4, 7, 17, 18], "movingboundaryntuevapor": [4, 7, 15, 17, 18], "calc_ntu": [4, 7], "calc_q_ntu": [4, 7], "calc_q_with_available_area": [4, 7], "calc_r": [4, 7], "calc_ep": [4, 7], "calc_m_flow_cp_min": [4, 7], "iterate_area": [4, 7], "calc_area": [4, 7], "calc_mean_temperatur": [4, 7], "get_condenser_phase_temperatures_and_alpha": [4, 7], "plot_lmtd_vs_cold_out": [4, 7], "separate_phas": [4, 7], "interfac": [4, 10], "access": [4, 10, 13, 17], "four": [4, 9], "port": 4, "typic": [4, 15], "high": [4, 5, 7, 9, 10, 18], "low": [4, 7, 9, 18], "through": [4, 19], "one": [4, 8, 10, 11, 14, 16, 17, 18, 19], "simpl": [4, 6, 8, 9, 15], "phase": [4, 7, 8, 9, 10, 11, 12], "separ": [4, 7, 9, 14], "getter": 4, "liquid": [4, 7, 9, 10], "n_max": [5, 13, 17, 18], "v_h": [5, 13, 17, 18], "extend": [5, 14], "specif": [5, 9, 10, 11, 12, 14], "rotat": 5, "per": [5, 17], "second": [5, 9, 10, 11, 15], "volum": [5, 10], "m": [5, 7, 8, 10, 13], "3": [5, 9, 10, 11, 14, 15, 16, 17, 18], "method": [5, 7, 8, 10, 15, 20], "volumetr": 5, "effici": [5, 8, 13, 15], "p_outlet": [5, 6, 13, 16], "isentrop": [5, 12], "mechan": 5, "frequenc": [5, 17], "refriger": [5, 7, 8, 10, 11, 13, 15], "electr": [5, 9], "power": [5, 9], "consum": 5, "adiabat": [5, 9], "energi": [5, 9, 10, 19], "balanc": [5, 9], "motor": 5, "invert": 5, "sec": 5, "eta_isentrop": [5, 13], "eta_mech": [5, 13, 20], "lambda_h": [5, 13], "inherit": [5, 9, 14], "basic": [5, 8, 12, 13, 14, 15, 17], "behavior": 5, "eta_invert": 5, "eta_motor": 5, "product": 5, "effect": [5, 7, 13], "thesi": [5, 19], "mirko": 5, "engelpracht": 5, "character": 5, "regress": [5, 20], "famili": 5, "coeffici": [5, 7, 8, 10], "hi": 5, "master": [5, 10], "datasheet": 5, "ten": 5, "tabl": [5, 11], "order": [5, 9, 10, 11, 14, 15, 19], "column": [5, 17], "import": [5, 7, 9, 12, 13, 14, 15, 16, 17, 18], "same": [5, 7, 10, 11, 13, 14, 15, 16, 18, 19], "tabel": 5, "match": [5, 16], "parameter_nam": 5, "fiction": 5, "placehold": 5, "h": [5, 10, 11, 12, 15, 16], "n1": 5, "n2": 5, "n_last": 5, "p1": 5, "42": 5, "12": [5, 10], "243": 5, "32": 5, "412": 5, "p10": 5, "10": [5, 10, 13, 14, 15, 17, 18, 19], "23": 5, "21": [5, 10], "41": 5, "2434": 5, "intern": [5, 7, 9, 10], "kei": [5, 11], "input_pow": 5, "eta_i": 5, "volumentr": 5, "sheet_nam": 5, "sheet": 5, "extrapol": [5, 20], "handl": [5, 10], "data": [5, 11, 13], "t_eva": [5, 15], "t_con": [5, 11, 17, 18], "type_": 5, "celsiu": 5, "interpol": 5, "keyword": [5, 6], "pa": [5, 9, 10, 12, 15], "t_sh": 5, "capacity_definit": 5, "t_sc": [5, 20], "assumed_eta_mech": 5, "callabl": 5, "scaling_factor": 5, "accord": [5, 8, 14, 15], "cool": [5, 9, 10], "h1": 5, "h4": 5, "h2": 5, "h3": 5, "assum": [5, 8, 9, 12, 13, 15, 16, 18], "otherwis": 5, "p_el": [5, 13], "definit": [5, 10], "need": [5, 9, 10, 13, 15, 17, 18], "pass": [5, 12, 13, 14], "funtion": 5, "signatur": 5, "coef_list": 5, "x_new": 5, "x": [5, 7, 8, 9, 10], "y": [5, 10], "linear": 5, "1d": 5, "avoid": [5, 15, 17], "known": 5, "expans": [6, 9, 10, 12, 15, 17, 18], "valv": [6, 9, 15, 17, 18], "cross": [6, 7, 8, 16], "section": [6, 8, 10, 14, 16], "child": [6, 9], "ev": [6, 9], "thei": [6, 11, 15], "isenthalp": [6, 9, 15], "airtowalltransf": [7, 8], "calc_laminar_area_nusselt": [7, 8], "calc_reynold": [7, 8], "wsuairtowal": [7, 8], "constantheattransf": [7, 8, 15, 17, 18], "constanttwophaseheattransf": [7, 8, 15, 17, 18], "heattransf": [7, 8], "twophaseheattransf": [7, 8], "calc_reynolds_pip": [7, 8], "turbulentfluidinpipetowalltransf": [7, 8], "calc_turbulent_tube_nusselt": [7, 8], "airsourceheatexchangergeometri": [7, 8], "a_freieoberflaecherohr": [7, 8], "a_rippen": [7, 8], "a_rohrinnen": [7, 8], "a_rohrunberippt": [7, 8], "alpha_": [7, 8], "char_length": [7, 8], "d_a": [7, 8], "d_i": [7, 8], "dicke_ripp": [7, 8], "eta_r": [7, 8], "hoeh": [7, 8], "laeng": [7, 8], "lambda_r": [7, 8], "n_rippen": [7, 8], "n_rohr": [7, 8], "phi": [7, 8], "t_l": [7, 8], "t_q": [7, 8], "tief": [7, 8], "verjuengungsfaktor": [7, 8], "vdiatlasairtowalltransf": [7, 8], "plateheatexchangergeometri": [7, 8], "amplitud": [7, 8], "d_h": [7, 8], "enlargement_factor": [7, 8], "height": [7, 8], "lambda_w": [7, 8], "n_plate": [7, 8], "wall_thick": [7, 8], "wave_length": [7, 8], "width": [7, 8], "vdiatlasplateheattransf": [7, 8], "calc_turbulent_plate_nusselt": [7, 8], "walltransf": [7, 8, 15, 17, 18], "inject": [7, 9, 14], "pure": [7, 10], "estim": [7, 8], "parent": [7, 9], "flow_typ": [7, 15, 17, 18], "counter_flow": 7, "ratio_outer_to_inner_area": [7, 15, 17, 18], "pipe": [7, 8], "nearli": 7, "diamet": [7, 8, 16], "length": [7, 8], "transfer": [7, 8, 9, 14, 15], "alpha": [7, 8, 15, 17, 18], "disabl": [7, 11], "ga": 7, "later": [7, 15], "valid": [7, 10, 11, 12, 15, 19], "percentag": 7, "dt_min": [7, 15], "neg": [7, 15], "transport_properti": [7, 8, 12], "transport": [7, 8, 10, 12, 15], "select": [7, 12], "secondary_medium": [7, 8, 15, 17, 18], "primari": [7, 11], "m_flow_cp": 7, "up": [7, 10, 11], "wall_heat_transf": [7, 15, 17, 18], "secondary_heat_transf": [7, 15, 17, 18], "gas_heat_transf": [7, 15, 17, 18], "liquid_heat_transf": [7, 15, 17, 18], "two_phase_heat_transf": [7, 15, 17, 18], "counter": [7, 15, 17, 18], "extern": [7, 14], "he": [7, 8, 9], "2": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20], "water": [7, 8, 17, 18], "air": [7, 8, 15, 17, 18], "total": [7, 8, 10], "state_q0": [7, 8], "state_q1": [7, 8], "qualiti": [7, 10, 12], "q_flow": 7, "overal": 7, "multipli": 7, "howev": [7, 11, 14, 15, 16, 17], "drastic": 7, "vdi": [7, 8, 20], "atla": [7, 8, 20], "propos": 7, "ratio": [7, 13, 14], "outer": [7, 14], "inner": [7, 10], "account": 7, "mismatch": 7, "direct": 7, "parallel": 7, "alpha_pri": 7, "alpha_sec": 7, "alpha_low_sid": 7, "alpha_high_sid": 7, "dt_pinch_min": 7, "logic": [7, 15], "arrang": [7, 8], "regim": [7, 8, 15], "depict": 7, "ihx_log": 7, "svg": 7, "actual": 7, "No": [7, 9, 12], "chang": [7, 9, 10, 11, 13, 15], "over": [7, 10, 12, 14], "tm": 7, "m_flow_primary_cp": 7, "dt_max": 7, "differenti": 7, "q_requir": 7, "a_avail": 7, "r": [7, 11, 17, 18], "ep": 7, "ebc": [7, 19], "lectur": 7, "simmodel": 7, "basicntu": 7, "children": [7, 12, 13, 16], "t_hot_in": 7, "t_hot_out": 7, "t_cold_in": 7, "t_cold_out": 7, "q_sc": 7, "q_lat": 7, "q_sh": 7, "dt_cold": 7, "lmtd": [7, 20], "decreas": [7, 15], "hot": 7, "c": [7, 10, 12, 13, 15, 19], "cold": 7, "state_max": 7, "state_min": 7, "three": [7, 11], "part": [7, 9, 15], "sc": 7, "latent": 7, "lat": 7, "sh": 7, "higher": [7, 9, 10, 15, 17], "enthalpi": [7, 9, 10, 12, 16], "a_cross": 8, "characteristic_length": 8, "m2": 8, "similitud": 8, "laminar": 8, "pr": [8, 10], "lambda_": [8, 15, 17, 18], "nusselt": 8, "reynold": 8, "prandlt": 8, "lambda": 8, "dynamic_viscos": 8, "viscos": [8, 10], "ws\u00fc": 8, "script": [8, 17], "rwth": [8, 19], "prandtl": [8, 10], "notimplementederror": 8, "subclass": 8, "thermodynam": [8, 9, 10, 11], "begin": 8, "region": [8, 9, 10, 12, 19], "end": [8, 10, 15], "characterist": 8, "turbul": 8, "taler2016": 8, "domanski1989_sp_smooth": 8, "amalfi2016": 8, "scriptws\u00fc": 8, "eta_by_eta_w": 8, "refer": [8, 10, 13, 19], "paper": [8, 19], "document": [8, 10, 12, 13, 15, 17], "info": [8, 9, 17, 18], "ref": [8, 10], "calibr": 8, "correl": [8, 15], "nuseelt": 8, "tube": 8, "conderns": 8, "50": [8, 13, 15, 17, 18], "500": 8, "00195": 8, "5e": [8, 16], "05": [8, 10, 14], "04": [8, 10, 11], "64": 8, "geometri": 8, "fin": 8, "row": 8, "shift": 8, "w\u00e4rmeatla": 8, "berechnungsbl\u00e4tt": 8, "f\u00fcr": 8, "den": 8, "w\u00e4rme\u00fcbergang": 8, "11": [8, 10], "auflag": 8, "1461": 8, "german": 8, "kept": 8, "well": [8, 10, 13, 15, 18, 19], "surfac": [8, 10, 11], "outsid": [8, 10, 12], "without": [8, 12, 14, 17], "alpha_r": 8, "appar": 8, "averag": [8, 10], "auxiliari": 8, "reduct": 8, "factor": [8, 10, 15, 20], "a_cross_fre": 8, "a_cross_smallest": 8, "geometry_paramet": 8, "thermal": [8, 10], "conduct": [8, 10, 12], "druckverlust": 8, "und": 8, "plattenw\u00e4rme\u00fcbertragern": 8, "1687": 8, "plate": [8, 20], "wave": 8, "hydraul": 8, "enlarg": 8, "zeta": 8, "drop": 8, "thick": [8, 15, 17, 18], "materi": 8, "km": 8, "complex": [9, 15, 18], "system": [9, 17, 19], "hp": [9, 11], "sink": 9, "therefor": 9, "consumpt": 9, "loss": 9, "equal": [9, 17, 18], "baseclass": 9, "map": [9, 11, 14, 17, 18], "dt_start_guess": 9, "dt_pinch_guess": 9, "simul": [9, 11, 14, 15, 16, 17, 19], "plausibl": 9, "first": [9, 10, 11, 12, 13, 14, 15, 16, 20], "entri": 9, "being": 9, "save_path": [9, 11, 17, 18], "config": 9, "p_con": 9, "degre": [9, 15], "p_eva": 9, "t_con_out": [9, 11, 17, 20], "t_con_in": [9, 11, 17], "dt_con": [9, 11], "m_flow_con": [9, 11, 17, 18], "t_eva_out": [9, 15], "t_eva_in": [9, 11, 15, 17, 18], "dt_eva": [9, 11], "m_flow_eva": [9, 11, 17, 18], "expansion_valve_high": 9, "expansion_valve_low": 9, "7": [9, 13, 17, 18], "idx": 9, "4": [9, 10, 15, 16], "under": [9, 17, 18], "while": [9, 12, 13, 15], "adher": 9, "sever": [9, 19], "maintain": [9, 10], "overh": 9, "high_pressure_compressor": [9, 18], "low_pressure_compressor": [9, 18], "high_pressure_valv": [9, 18], "low_pressure_valv": [9, 18], "partial": 9, "portion": 9, "stage": [9, 19], "except": 9, "intermedi": [9, 15], "9": [9, 13, 14, 17, 18], "5_ihx": 9, "6_ihx": 9, "mix": [9, 10], "1_vi": 9, "7_ihx": 9, "1_vi_mix": 9, "split": 9, "stream": 9, "realiti": [9, 15], "would": [9, 10, 14, 15, 16], "achiev": [9, 11, 14, 18], "thu": [9, 12, 13, 14, 15], "move": [9, 15, 20], "boundari": [9, 10, 14, 15], "fit": 9, "simplic": 9, "amount": [9, 15], "increas": 9, "long": [9, 10], "enough": [9, 16], "hotter": 9, "sub": 9, "fulli": [9, 10], "ideal": 9, "seper": [9, 18], "5_vip": 9, "6_vip": 9, "7_vip": 9, "fluid_nam": [10, 12, 13, 15, 16], "use_high_level_api": 10, "api": 10, "much": [10, 11, 16], "slower": 10, "mode": 10, "var1": 10, "var2": 10, "chosen": 10, "si": 10, "pt": [10, 13, 15], "might": [10, 14], "fall": 10, "within": 10, "densiti": 10, "know": [10, 17], "invers": 10, "physic": 10, "scope": 10, "998": 10, "999": 10, "supercrit": 10, "pd": [10, 17], "ph": [10, 12, 15], "pq": [10, 12, 13, 15], "entropi": 10, "pu": 10, "td": 10, "th": 10, "tq": [10, 12, 15, 16], "tu": 10, "dh": 10, "d": [10, 16, 17, 18, 19], "du": 10, "abov": [10, 14, 17, 18], "assertionerror": 10, "avail": [10, 14, 19], "retriev": 10, "tc": 10, "pc": 10, "dc": 10, "molar": 10, "mol": 10, "serv": 10, "comput": 10, "limit": [10, 11, 12], "state_in": 10, "state_out": 10, "quantiti": 10, "100000": 10, "p_step": [10, 12, 15], "5000": [10, 15, 17, 18], "arrai": [10, 11, 13], "purpos": 10, "It": [10, 19], "rang": [10, 12, 14, 15], "variat": 10, "ndarrai": [10, 11], "behaviour": 10, "noth": [10, 15], "z": 10, "dll_path": 10, "use_error_check": 10, "use_warn": 10, "ref_prop_path": 10, "copy_dl": 10, "copy_dll_directori": 10, "connect": 10, "param": 10, "composit": 10, "design": [10, 11, 17, 18, 19, 20], "mixtur": 10, "shall": 10, "r32": 10, "fld": 10, "r125": 10, "fraction": 10, "697": 10, "303": 10, "similar": [10, 11, 12, 18], "r410a": [10, 11], "dll": [10, 12, 19], "path_to_dllrefprop64": 10, "boolean": 10, "warn": [10, 20], "env": 10, "rpprefix": 10, "simultan": 10, "multipl": [10, 11, 13, 14], "multiprocess": [10, 11, 20], "instal": 10, "ctrefprop": 10, "http": [10, 11, 19], "github": [10, 19], "com": [10, 19], "usnistgov": 10, "tree": 10, "python": [10, 12], "deviat": 10, "gui": 10, "last": [10, 11, 13, 16], "somehow": 10, "though": 10, "rp": 10, "now": [10, 12, 13, 15, 16, 17, 18, 20], "header": [10, 17], "global": 10, "warm": 10, "potenti": 10, "ozon": 10, "deplet": 10, "safeti": 10, "substanc": 10, "crit": 10, "2020": 10, "christoph": [10, 11], "hoeg": [10, 11], "gwp": 10, "odp": 10, "wasn": 10, "testet": 10, "r455a": 10, "still": [10, 13, 15, 16], "slightli": 10, "25": [10, 15, 17, 18], "command": 10, "instruct": 10, "init": 10, "__init__": [10, 14], "remov": 10, "protect": 10, "_call_refprop": 10, "frac": 10, "08": 10, "abflshdll": 10, "abflsh": 10, "convers": [10, 19], "so": [10, 12, 13, 15], "user": [10, 14, 19], "choos": 10, "Not": [10, 16], "19": 10, "debug": 10, "predefin": 10, "22": 10, "6": [10, 13, 17, 18], "06": 10, "fabian": 10, "wuellhorst": 10, "kj": [10, 12, 15], "kgk": [10, 15], "kr": 10, "prop": [10, 15, 16], "include_end": 10, "save_txt": 10, "kind": 10, "text": 10, "comp_nam": 10, "tmin": 10, "tmax": 10, "dmax": 10, "pmax": 10, "min": 10, "max": [10, 15], "static": 10, "locat": [10, 11], "path_to_dl": 10, "fail": 10, "longnam": 10, "use_round": 10, "exact": 10, "fourth": 10, "mass_frac": 10, "z_molar": 10, "whose": 10, "_mol_frac": 10, "normal": 10, "boil": 10, "bar": [10, 12, 15], "nbp": 10, "t_sat": 10, "satur": 10, "solid": 10, "equilibrium": 10, "p_sat": 10, "tripl": 10, "fine": 10, "t_tpl": 10, "p_tpl": 10, "wrapper_vers": 10, "refprop_vers": 10, "find": [10, 15], "out": [10, 13, 14], "_mix_flag": 10, "err": 10, "notifi": 10, "went": 10, "u": 10, "v": [10, 19], "necessarili": 10, "__str__": 10, "represent": 10, "lam": 10, "dyn_vi": 10, "kin_vi": 10, "cv": 10, "beta": 10, "sur_ten": 10, "ace_fac": 10, "kinemat": 10, "isobar": [10, 12], "isochor": 10, "tension": 10, "acentr": 10, "belong": [10, 17], "databas": 10, "load": [10, 17, 18], "variou": [10, 11], "relat": 10, "1000": [10, 15, 17, 18], "primarili": 10, "visual": [10, 11], "accuraci": [10, 11], "exclus": 10, "append": [10, 12, 13, 14, 15, 16], "form": 10, "revers": 10, "author": [10, 11], "jona": 10, "brach": 10, "To": [10, 12, 14, 15, 17, 18, 19], "test": [10, 14, 19], "statu": 10, "exclud": 10, "gener": [11, 17, 18, 20], "use_multiprocess": [11, 17, 18], "core": 11, "export": 11, "use_condenser_inlet": [11, 17, 18], "save_plot": [11, 17, 18], "save_sdf": 11, "full": [11, 17, 18], "factori": [11, 17, 18], "tool": [11, 19], "modelica": 11, "off": [11, 17, 18], "sdf": [11, 14, 17, 18, 20], "vari": [11, 17, 18], "dimens": 11, "spread": [11, 14, 15], "nomin": [11, 20], "m_flow_eva_start": 11, "m_flow_con_start": 11, "001": 11, "about": 11, "diagram": [11, 12], "figur": 11, "ax": [11, 15], "matplotlib": [11, 12, 13, 15, 16, 17], "filepath_sdf": [11, 17], "nd_data": [11, 17], "first_dimens": [11, 17], "second_dimens": [11, 17], "violin_plot_vari": 11, "third_dimens": 11, "dataset": 11, "3d": [11, 17], "scatter": [11, 17], "violin": 11, "them": [11, 12, 18], "third": [11, 13], "4d": 11, "keyerror": 11, "heatpumpmap": 11, "cop": [11, 14, 17], "optihorn": 11, "org": [11, 19], "galleri": 11, "statist": 11, "customized_violin": 11, "html": 11, "sphx": 11, "glr": 11, "24": 11, "2023": [11, 19], "transform": 11, "datafram": 11, "layout": 11, "declar": 11, "panda": [11, 17], "df_state": 11, "filepath": 11, "Be": 11, "care": 11, "Then": 11, "latter": [11, 12, 13, 14], "element": 11, "overwrit": 11, "scale": [11, 20], "Of": 11, "t_amb": 11, "dimension": 11, "scalar": 11, "top": 11, "group": 11, "convert": 11, "excel": 11, "demonstr": [12, 13, 14, 15, 16], "its": [12, 13, 14, 15, 16], "shown": [12, 14], "let": [12, 13, 14, 15, 16, 17, 18], "vclibpi": [12, 13, 14, 15, 16, 17, 18], "purchas": 12, "togeth": 12, "go": [12, 13, 15], "propan": [12, 13, 15, 16, 17, 18], "explain": [12, 13], "2e5": 12, "100": [12, 15, 16], "100e3": 12, "plai": [12, 13], "around": [12, 13, 16], "those": [12, 14, 15, 17, 19], "look": [12, 16, 17, 19], "again": [12, 13, 15, 16, 17], "learn": [12, 13], "idea": 12, "loop": [12, 14, 15], "40": [12, 15, 16], "273": [12, 13, 15, 16, 17, 18], "15": [12, 13, 15, 16, 17, 18], "t_crit": 12, "p_crit": 12, "d_crit": 12, "q0": 12, "q1": 12, "reduc": 12, "revert": 12, "comprehens": 12, "quit": 12, "pyplot": [12, 13, 15, 16, 17], "plt": [12, 13, 15, 16, 17], "ylabel": [12, 13, 15, 16, 17], "xlabel": [12, 13, 15, 16, 17], "color": [12, 15], "black": [12, 15], "nor": 12, "state_1": 12, "state_3": 12, "state_4": 12, "state_2": 12, "marker": [12, 15, 16], "plot_lines_h": 12, "plot_lines_t": 12, "red": [12, 15], "skill": 12, "ve": 12, "tweak": [12, 16], "next": 12, "exemplari": [13, 16], "constant_efficiency_compressor": 13, "120": 13, "19e": [13, 17, 18], "95": 13, "do": [13, 15], "1bar": 13, "p_inlet": 13, "1e5": [13, 15, 16], "t_superheat": 13, "most": [13, 14, 17], "concept": [13, 14], "instanti": [13, 15], "reli": 13, "6e5": 13, "f": [13, 14, 15, 16, 19], "np": [13, 14, 15, 16], "arang": [13, 16], "t_outlet": 13, "t_": 13, "mathrm": [13, 15], "pi": 13, "continu": [13, 15], "interest": [13, 14], "dot": 13, "influenc": [13, 17, 18], "metric": 13, "deeper": 13, "alter": 13, "could": [14, 15, 17, 18], "sometim": 14, "hand": [14, 17], "moreov": 14, "strongli": 14, "link": 14, "via": 14, "anoth": [14, 17, 18], "manner": 14, "sai": 14, "k_vapor_inject": 14, "control_input": 14, "along": 14, "easier": 14, "sqrt": 14, "regist": 14, "decid": 14, "mimic": 14, "vaporinjectioncompressorcontrol": 14, "essenti": 14, "anyth": 14, "some_interesting_output": 14, "14": [14, 16], "distinct": 14, "t_1": 14, "overrid": 14, "histori": [14, 19], "preserv": 14, "some_valu": 14, "contrari": 15, "epsntu": 15, "lot": 15, "236": [15, 17, 18], "2e": [15, 17, 18], "until": [15, 19], "met": 15, "oscil": 15, "abl": 15, "meet": 15, "directli": [15, 16], "real": 15, "med": [15, 16], "done": 15, "extra": 15, "multi": 15, "process": [15, 16, 19], "correspond": 15, "a2w25": 15, "p_evapor": [15, 16], "state_condenser_outlet": [15, 16], "t_evapor": 15, "indic": 15, "smaller": [15, 16, 18], "pre": 15, "margin": 15, "greater": [15, 17], "veri": 15, "larg": [15, 16], "q_ntu": 15, "less": 15, "linspac": 15, "1e4": 15, "fanci": 15, "posit": 15, "back": 15, "old": 15, "At": 15, "fig": 15, "subplot": 15, "sharex": 15, "set_ylabel": 15, "delta": 15, "set_xlabel": 15, "p_": 15, "eva": 15, "realli": 15, "infinit": 15, "max_iter": 15, "n_iter": 15, "p_eva_next": 15, "min_step": 15, "min_error": 15, "elif": 15, "accur": 15, "break": 15, "els": [15, 17], "converg": 15, "did": [15, 17], "solut": 15, "took": 15, "optim": [15, 19], "techniqu": 15, "quickli": 15, "state_vapor": 15, "states_to_plot": 15, "blue": 15, "ylim": 15, "275": 15, "mm": 16, "give": 16, "149034617014494": 16, "ca": 16, "m_flow_ref_go": 16, "repeat": 16, "d_mm_arrai": 16, "d_mm": 16, "1e": 16, "common": 17, "repetit": 17, "modern": 17, "tell": 17, "fist": 17, "develop": [17, 19], "previou": 17, "But": 17, "125": [17, 18], "plug": [17, 18], "00_temp": [17, 18], "simple_heat_pump": 17, "30": [17, 18], "70": 17, "messag": [17, 18], "basicconfig": [17, 18], "save_path_sdf": 17, "save_path_csv": 17, "happen": 17, "explor": 17, "o": 17, "listdir": 17, "One": 17, "standard_propan": 17, "df": 17, "read_csv": 17, "index_col": 17, "x_name": 17, "y_name": 17, "20": 17, "often": 17, "lead": 17, "field": 17, "ones": 18, "twice": 18, "somewhat": 18, "60": 18, "prior": [18, 20], "feel": 18, "asid": 18, "usag": 18, "50000": 18, "And": 18, "repositori": 19, "apor": 19, "ompress": 19, "lib": 19, "rari": 19, "thon": 19, "configur": 19, "chiller": 19, "pip": 19, "bui": 19, "licenc": 19, "obtain": 19, "egg": 19, "clone": 19, "recommend": 19, "jupyt": 19, "notebook": 19, "guid": 19, "prepar": 19, "encourag": 19, "local": 19, "browser": 19, "juypter": 19, "web": 19, "host": 19, "jupyter_notebook": 19, "Or": 19, "folder": 19, "publish": 19, "doi": 19, "5281": 19, "zenodo": 19, "14202185": 19, "moreoev": 19, "vere": 19, "w\u00fcllhorst": 19, "mehrfeld": 19, "m\u00fcller": 19, "2021": 19, "toward": 19, "integr": 19, "intensif": 19, "manag": 19, "250": 19, "114888": 19, "1016": 19, "enconman": 19, "christian": 19, "dirk": 19, "advisor": 19, "elbel": 19, "stefan": 19, "build": 19, "phd": 19, "18154": 19, "04070": 19, "visit": 19, "offici": 19, "inquir": 19, "contact": 19, "eonerc": 19, "aachen": 19, "de": 19, "gratefulli": 19, "financi": 19, "feder": 19, "ministri": 19, "affair": 19, "climat": 19, "action": 19, "bmwk": 19, "promot": 19, "03en1022b": 19, "european": 19, "fund": 19, "erdf": 19, "0500029": 19, "contribut": 19, "styleguid": 19, "pylint": 19, "index": 19, "search": 19, "v0": 20, "movingboundari": 20, "c10": 20}, "objects": {"": [[2, 0, 0, "-", "vclibpy"]], "vclibpy": [[3, 0, 0, "-", "algorithms"], [4, 0, 0, "-", "components"], [2, 0, 0, "-", "datamodels"], [9, 0, 0, "-", "flowsheets"], [10, 0, 0, "-", "media"], [11, 0, 0, "-", "utils"]], "vclibpy.algorithms": [[3, 0, 0, "-", "base"], [3, 0, 0, "-", "fsolve"], [3, 0, 0, "-", "iteration"]], "vclibpy.algorithms.base": [[3, 1, 1, "", "Algorithm"]], "vclibpy.algorithms.base.Algorithm": [[3, 2, 1, "", "calc_steady_state"], [3, 2, 1, "", "get_improved_start_condensing_pressure"], [3, 2, 1, "", "initial_setup"]], "vclibpy.algorithms.fsolve": [[3, 1, 1, "", "FSolve"]], "vclibpy.algorithms.fsolve.FSolve": [[3, 2, 1, "", "calc_steady_state"]], "vclibpy.algorithms.iteration": [[3, 1, 1, "", "Iteration"]], "vclibpy.algorithms.iteration.Iteration": [[3, 2, 1, "", "calc_steady_state"]], "vclibpy.components": [[4, 0, 0, "-", "component"], [5, 0, 0, "-", "compressors"], [6, 0, 0, "-", "expansion_valves"], [7, 0, 0, "-", "heat_exchangers"], [4, 0, 0, "-", "phase_separator"]], "vclibpy.components.component": [[4, 1, 1, "", "BaseComponent"], [4, 1, 1, "", "FourPortComponent"], [4, 1, 1, "", "TwoPortComponent"]], "vclibpy.components.component.BaseComponent": [[4, 3, 1, "", "med_prop"]], "vclibpy.components.component.FourPortComponent": [[4, 3, 1, "", "m_flow_high"], [4, 3, 1, "", "m_flow_low"], [4, 3, 1, "", "state_inlet_high"], [4, 3, 1, "", "state_inlet_low"], [4, 3, 1, "", "state_outlet_high"], [4, 3, 1, "", "state_outlet_low"]], "vclibpy.components.component.TwoPortComponent": [[4, 3, 1, "", "m_flow"], [4, 3, 1, "", "state_inlet"], [4, 3, 1, "", "state_outlet"]], "vclibpy.components.compressors": [[5, 0, 0, "-", "compressor"], [5, 0, 0, "-", "constant_effectivness"], [5, 0, 0, "-", "rotary"], [5, 0, 0, "-", "ten_coefficient"]], "vclibpy.components.compressors.compressor": [[5, 1, 1, "", "Compressor"]], "vclibpy.components.compressors.compressor.Compressor": [[5, 2, 1, "", "calc_electrical_power"], [5, 2, 1, "", "calc_m_flow"], [5, 2, 1, "", "calc_state_outlet"], [5, 2, 1, "", "get_eta_isentropic"], [5, 2, 1, "", "get_eta_mech"], [5, 2, 1, "", "get_lambda_h"], [5, 2, 1, "", "get_n_absolute"], [5, 2, 1, "", "get_p_outlet"]], "vclibpy.components.compressors.constant_effectivness": [[5, 1, 1, "", "ConstantEffectivenessCompressor"]], "vclibpy.components.compressors.constant_effectivness.ConstantEffectivenessCompressor": [[5, 2, 1, "", "get_eta_isentropic"], [5, 2, 1, "", "get_eta_mech"], [5, 2, 1, "", "get_lambda_h"]], "vclibpy.components.compressors.rotary": [[5, 1, 1, "", "RotaryCompressor"]], "vclibpy.components.compressors.rotary.RotaryCompressor": [[5, 2, 1, "", "get_eta_isentropic"], [5, 2, 1, "", "get_eta_mech"], [5, 2, 1, "", "get_lambda_h"]], "vclibpy.components.compressors.ten_coefficient": [[5, 1, 1, "", "BaseTenCoefficientCompressor"], [5, 1, 1, "", "DataSheetCompressor"], [5, 1, 1, "", "TenCoefficientCompressor"], [5, 4, 1, "", "calc_ten_coefficients"], [5, 4, 1, "", "linear_interpolate_extrapolate"]], "vclibpy.components.compressors.ten_coefficient.BaseTenCoefficientCompressor": [[5, 2, 1, "", "get_parameter"]], "vclibpy.components.compressors.ten_coefficient.DataSheetCompressor": [[5, 2, 1, "", "get_eta_isentropic"], [5, 2, 1, "", "get_eta_mech"], [5, 2, 1, "", "get_lambda_h"]], "vclibpy.components.compressors.ten_coefficient.TenCoefficientCompressor": [[5, 2, 1, "", "get_eta_isentropic"], [5, 2, 1, "", "get_eta_mech"], [5, 2, 1, "", "get_lambda_h"]], "vclibpy.components.expansion_valves": [[6, 0, 0, "-", "bernoulli"], [6, 0, 0, "-", "expansion_valve"]], "vclibpy.components.expansion_valves.bernoulli": [[6, 1, 1, "", "Bernoulli"]], "vclibpy.components.expansion_valves.bernoulli.Bernoulli": [[6, 2, 1, "", "calc_m_flow_at_opening"], [6, 2, 1, "", "calc_opening_at_m_flow"], [6, 2, 1, "", "calc_outlet_pressure_at_m_flow_and_opening"]], "vclibpy.components.expansion_valves.expansion_valve": [[6, 1, 1, "", "ExpansionValve"]], "vclibpy.components.expansion_valves.expansion_valve.ExpansionValve": [[6, 2, 1, "", "calc_m_flow_at_opening"], [6, 2, 1, "", "calc_opening_at_m_flow"], [6, 2, 1, "", "calc_outlet"], [6, 2, 1, "", "calc_outlet_pressure_at_m_flow_and_opening"]], "vclibpy.components.heat_exchangers": [[7, 0, 0, "-", "economizer"], [7, 0, 0, "-", "heat_exchanger"], [8, 0, 0, "-", "heat_transfer"], [7, 0, 0, "-", "ihx_ntu"], [7, 0, 0, "-", "moving_boundary_Tm"], [7, 0, 0, "-", "moving_boundary_ntu"], [7, 0, 0, "-", "ntu"], [7, 0, 0, "-", "utils"]], "vclibpy.components.heat_exchangers.economizer": [[7, 1, 1, "", "VaporInjectionEconomizerNTU"]], "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU": [[7, 2, 1, "", "calc"], [7, 2, 1, "", "calc_alpha_secondary"], [7, 2, 1, "", "calc_transport_properties_secondary_medium"], [7, 2, 1, "", "set_secondary_cp"], [7, 2, 1, "", "start_secondary_med_prop"], [7, 3, 1, "", "state_two_phase_inlet"], [7, 3, 1, "", "state_two_phase_outlet"], [7, 2, 1, "", "terminate_secondary_med_prop"]], "vclibpy.components.heat_exchangers.heat_exchanger": [[7, 1, 1, "", "ExternalHeatExchanger"], [7, 1, 1, "", "HeatExchanger"], [7, 1, 1, "", "InternalHeatExchanger"]], "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger": [[7, 2, 1, "", "calc_Q_flow"], [7, 2, 1, "", "calc_alpha_gas"], [7, 2, 1, "", "calc_alpha_liquid"], [7, 2, 1, "", "calc_alpha_secondary"], [7, 2, 1, "", "calc_alpha_two_phase"], [7, 2, 1, "", "calc_secondary_Q_flow"], [7, 2, 1, "", "calc_secondary_cp"], [7, 2, 1, "", "calc_transport_properties_secondary_medium"], [7, 3, 1, "", "cp_secondary"], [7, 3, 1, "", "m_flow_secondary"], [7, 3, 1, "", "m_flow_secondary_cp"], [7, 2, 1, "", "start_secondary_med_prop"], [7, 2, 1, "", "terminate_secondary_med_prop"]], "vclibpy.components.heat_exchangers.heat_exchanger.HeatExchanger": [[7, 2, 1, "", "calc"], [7, 2, 1, "", "calc_k"], [7, 2, 1, "", "calc_wall_heat_transfer"]], "vclibpy.components.heat_exchangers.heat_transfer": [[8, 0, 0, "-", "air_to_wall"], [8, 0, 0, "-", "constant"], [8, 0, 0, "-", "heat_transfer"], [8, 0, 0, "-", "pipe_to_wall"], [8, 0, 0, "-", "vdi_atlas_air_to_wall"], [8, 0, 0, "-", "vdi_atlas_plate_he"], [8, 0, 0, "-", "wall"]], "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall": [[8, 1, 1, "", "AirToWallTransfer"], [8, 1, 1, "", "WSUAirToWall"]], "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.AirToWallTransfer": [[8, 2, 1, "", "calc"], [8, 2, 1, "", "calc_laminar_area_nusselt"], [8, 2, 1, "", "calc_reynolds"]], "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.WSUAirToWall": [[8, 2, 1, "", "calc_laminar_area_nusselt"], [8, 2, 1, "", "calc_reynolds"]], "vclibpy.components.heat_exchangers.heat_transfer.constant": [[8, 1, 1, "", "ConstantHeatTransfer"], [8, 1, 1, "", "ConstantTwoPhaseHeatTransfer"]], "vclibpy.components.heat_exchangers.heat_transfer.constant.ConstantHeatTransfer": [[8, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.heat_transfer.constant.ConstantTwoPhaseHeatTransfer": [[8, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer": [[8, 1, 1, "", "HeatTransfer"], [8, 1, 1, "", "TwoPhaseHeatTransfer"], [8, 4, 1, "", "calc_reynolds_pipe"]], "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.HeatTransfer": [[8, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.TwoPhaseHeatTransfer": [[8, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall": [[8, 1, 1, "", "TurbulentFluidInPipeToWallTransfer"]], "vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall.TurbulentFluidInPipeToWallTransfer": [[8, 2, 1, "", "calc"], [8, 2, 1, "", "calc_turbulent_tube_nusselt"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall": [[8, 1, 1, "", "AirSourceHeatExchangerGeometry"], [8, 1, 1, "", "VDIAtlasAirToWallTransfer"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry": [[8, 3, 1, "", "A"], [8, 3, 1, "", "A_FreieOberflaecheRohr"], [8, 3, 1, "", "A_Rippen"], [8, 3, 1, "", "A_RohrInnen"], [8, 3, 1, "", "A_RohrUnberippt"], [8, 5, 1, "", "a"], [8, 2, 1, "", "alpha_S"], [8, 3, 1, "", "char_length"], [8, 5, 1, "", "d_a"], [8, 5, 1, "", "d_i"], [8, 5, 1, "", "dicke_rippe"], [8, 2, 1, "", "eta_R"], [8, 5, 1, "", "hoehe"], [8, 5, 1, "", "laenge"], [8, 5, 1, "", "lambda_R"], [8, 5, 1, "", "n_Rippen"], [8, 5, 1, "", "n_Rohre"], [8, 3, 1, "", "phi"], [8, 5, 1, "", "t_l"], [8, 5, 1, "", "t_q"], [8, 5, 1, "", "tiefe"], [8, 3, 1, "", "verjuengungsfaktor"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.VDIAtlasAirToWallTransfer": [[8, 2, 1, "", "calc_laminar_area_nusselt"], [8, 2, 1, "", "calc_reynolds"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he": [[8, 1, 1, "", "PlateHeatExchangerGeometry"], [8, 1, 1, "", "VDIAtlasPlateHeatTransfer"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry": [[8, 3, 1, "", "A"], [8, 3, 1, "", "X"], [8, 5, 1, "", "amplitude"], [8, 3, 1, "", "d_h"], [8, 3, 1, "", "enlargement_factor"], [8, 5, 1, "", "height"], [8, 5, 1, "", "lambda_w"], [8, 5, 1, "", "n_plates"], [8, 5, 1, "", "phi"], [8, 5, 1, "", "wall_thickness"], [8, 5, 1, "", "wave_length"], [8, 5, 1, "", "width"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.VDIAtlasPlateHeatTransfer": [[8, 2, 1, "", "calc"], [8, 2, 1, "", "calc_reynolds"], [8, 2, 1, "", "calc_turbulent_plate_nusselt"]], "vclibpy.components.heat_exchangers.heat_transfer.wall": [[8, 1, 1, "", "WallTransfer"]], "vclibpy.components.heat_exchangers.heat_transfer.wall.WallTransfer": [[8, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.ihx_ntu": [[7, 1, 1, "", "IHX_NTU"]], "vclibpy.components.heat_exchangers.ihx_ntu.IHX_NTU": [[7, 2, 1, "", "calc"], [7, 2, 1, "", "set_missing_states"]], "vclibpy.components.heat_exchangers.moving_boundary_Tm": [[7, 1, 1, "", "MovingBoundaryTmCondenser"], [7, 1, 1, "", "MovingBoundaryTmEvaporator"]], "vclibpy.components.heat_exchangers.moving_boundary_Tm.MovingBoundaryTmCondenser": [[7, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.moving_boundary_Tm.MovingBoundaryTmEvaporator": [[7, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.moving_boundary_ntu": [[7, 1, 1, "", "MovingBoundaryNTUCondenser"], [7, 1, 1, "", "MovingBoundaryNTUEvaporator"]], "vclibpy.components.heat_exchangers.moving_boundary_ntu.MovingBoundaryNTUCondenser": [[7, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.moving_boundary_ntu.MovingBoundaryNTUEvaporator": [[7, 2, 1, "", "calc"]], "vclibpy.components.heat_exchangers.ntu": [[7, 4, 1, "", "calc_NTU"], [7, 4, 1, "", "calc_Q_ntu"], [7, 4, 1, "", "calc_Q_with_available_area"], [7, 4, 1, "", "calc_R"], [7, 4, 1, "", "calc_eps"], [7, 4, 1, "", "calc_m_flow_cp_min"], [7, 4, 1, "", "iterate_area"]], "vclibpy.components.heat_exchangers.utils": [[7, 4, 1, "", "calc_area"], [7, 4, 1, "", "calc_mean_temperature"], [7, 4, 1, "", "get_condenser_phase_temperatures_and_alpha"], [7, 4, 1, "", "plot_lmtd_vs_cold_out"], [7, 4, 1, "", "separate_phases"]], "vclibpy.components.phase_separator": [[4, 1, 1, "", "PhaseSeparator"]], "vclibpy.components.phase_separator.PhaseSeparator": [[4, 3, 1, "", "state_inlet"], [4, 3, 1, "", "state_outlet"], [4, 3, 1, "", "state_outlet_liquid"], [4, 3, 1, "", "state_outlet_vapor"]], "vclibpy.datamodels": [[2, 1, 1, "", "CondenserPowerControl"], [2, 1, 1, "", "ControlInputs"], [2, 1, 1, "", "FlowsheetState"], [2, 1, 1, "", "HeatExchangerInputs"], [2, 1, 1, "", "Inputs"], [2, 1, 1, "", "RelativeCompressorSpeedControl"], [2, 1, 1, "", "Variable"], [2, 1, 1, "", "VariableContainer"]], "vclibpy.datamodels.HeatExchangerInputs": [[2, 3, 1, "", "T"], [2, 2, 1, "", "get_all_inputs"]], "vclibpy.datamodels.Inputs": [[2, 2, 1, "", "add_inputs_to_fs_state"], [2, 2, 1, "", "get_name"]], "vclibpy.datamodels.Variable": [[2, 5, 1, "", "description"], [2, 5, 1, "", "name"], [2, 5, 1, "", "unit"], [2, 5, 1, "", "value"]], "vclibpy.datamodels.VariableContainer": [[2, 2, 1, "", "convert_to_str_value_format"], [2, 2, 1, "", "copy"], [2, 2, 1, "", "get"], [2, 2, 1, "", "get_name"], [2, 2, 1, "", "get_variable_names"], [2, 2, 1, "", "get_variables"], [2, 2, 1, "", "items"], [2, 2, 1, "", "items_not_none"], [2, 2, 1, "", "set"]], "vclibpy.flowsheets": [[9, 0, 0, "-", "base"], [9, 0, 0, "-", "ihx"], [9, 0, 0, "-", "standard"], [9, 0, 0, "-", "vapor_injection"], [9, 0, 0, "-", "vapor_injection_economizer"], [9, 0, 0, "-", "vapor_injection_phase_separator"]], "vclibpy.flowsheets.base": [[9, 1, 1, "", "BaseCycle"], [9, 4, 1, "", "fill_fs_state_from_inputs"]], "vclibpy.flowsheets.base.BaseCycle": [[9, 2, 1, "", "add_all_states_to_fs_state"], [9, 2, 1, "", "calc_electrical_power"], [9, 2, 1, "", "calc_states"], [9, 2, 1, "", "calculate_cycle_for_pressures"], [9, 2, 1, "", "calculate_outputs_for_valid_pressures"], [9, 5, 1, "", "flowsheet_name"], [9, 2, 1, "", "get_all_components"], [9, 2, 1, "", "get_start_condensing_pressure"], [9, 2, 1, "", "get_start_evaporating_pressure"], [9, 2, 1, "", "get_states_in_order_for_plotting"], [9, 2, 1, "", "plot_cycle"], [9, 2, 1, "", "set_condenser_outlet_based_on_subcooling"], [9, 2, 1, "", "set_evaporator_outlet_based_on_superheating"], [9, 2, 1, "", "setup_new_fluid"], [9, 2, 1, "", "terminate"]], "vclibpy.flowsheets.ihx": [[9, 1, 1, "", "IHX"]], "vclibpy.flowsheets.ihx.IHX": [[9, 2, 1, "", "calc_electrical_power"], [9, 2, 1, "", "calc_states"], [9, 5, 1, "", "flowsheet_name"], [9, 5, 1, "", "fluid"], [9, 2, 1, "", "get_all_components"], [9, 2, 1, "", "get_states_in_order_for_plotting"], [9, 2, 1, "", "set_ihx_outlet_based_on_superheating"]], "vclibpy.flowsheets.standard": [[9, 1, 1, "", "StandardCycle"]], "vclibpy.flowsheets.standard.StandardCycle": [[9, 2, 1, "", "calc_electrical_power"], [9, 2, 1, "", "calc_states"], [9, 5, 1, "", "flowsheet_name"], [9, 5, 1, "", "fluid"], [9, 2, 1, "", "get_all_components"], [9, 2, 1, "", "get_states_in_order_for_plotting"]], "vclibpy.flowsheets.vapor_injection": [[9, 1, 1, "", "BaseVaporInjection"]], "vclibpy.flowsheets.vapor_injection.BaseVaporInjection": [[9, 2, 1, "", "calc_electrical_power"], [9, 2, 1, "", "calc_injection"], [9, 2, 1, "", "calc_states"], [9, 5, 1, "", "flowsheet_name"], [9, 5, 1, "", "fluid"], [9, 2, 1, "", "get_all_components"], [9, 2, 1, "", "get_states_in_order_for_plotting"]], "vclibpy.flowsheets.vapor_injection_economizer": [[9, 1, 1, "", "VaporInjectionEconomizer"]], "vclibpy.flowsheets.vapor_injection_economizer.VaporInjectionEconomizer": [[9, 2, 1, "", "calc_injection"], [9, 5, 1, "", "flowsheet_name"], [9, 5, 1, "", "fluid"], [9, 2, 1, "", "get_all_components"], [9, 2, 1, "", "get_states_in_order_for_plotting"]], "vclibpy.flowsheets.vapor_injection_phase_separator": [[9, 1, 1, "", "VaporInjectionPhaseSeparator"]], "vclibpy.flowsheets.vapor_injection_phase_separator.VaporInjectionPhaseSeparator": [[9, 2, 1, "", "calc_injection"], [9, 5, 1, "", "flowsheet_name"], [9, 5, 1, "", "fluid"], [9, 2, 1, "", "get_all_components"], [9, 2, 1, "", "get_states_in_order_for_plotting"]], "vclibpy.media": [[10, 1, 1, "", "CoolProp"], [10, 1, 1, "", "MedProp"], [10, 1, 1, "", "RefProp"], [10, 1, 1, "", "ThermodynamicState"], [10, 1, 1, "", "TransportProperties"], [10, 0, 0, "-", "cool_prop"], [10, 0, 0, "-", "media"], [10, 0, 0, "-", "ref_prop"], [10, 0, 0, "-", "states"]], "vclibpy.media.CoolProp": [[10, 2, 1, "", "calc_state"], [10, 2, 1, "", "calc_transport_properties"], [10, 2, 1, "", "get_critical_point"], [10, 2, 1, "", "get_molar_mass"]], "vclibpy.media.MedProp": [[10, 2, 1, "", "calc_mean_transport_properties"], [10, 2, 1, "", "calc_state"], [10, 2, 1, "", "calc_transport_properties"], [10, 2, 1, "", "get_critical_point"], [10, 2, 1, "", "get_molar_mass"], [10, 2, 1, "", "get_two_phase_limits"], [10, 2, 1, "", "terminate"]], "vclibpy.media.RefProp": [[10, 2, 1, "", "calc_satliq_state"], [10, 2, 1, "", "calc_state"], [10, 2, 1, "", "calc_transport_properties"], [10, 2, 1, "", "get_available_substances"], [10, 2, 1, "", "get_comp_names"], [10, 2, 1, "", "get_critical_point"], [10, 2, 1, "", "get_def_limits"], [10, 2, 1, "", "get_dll_path"], [10, 2, 1, "", "get_fluid_name"], [10, 2, 1, "", "get_gwp"], [10, 2, 1, "", "get_longname"], [10, 2, 1, "", "get_mass_fraction"], [10, 2, 1, "", "get_mol_fraction"], [10, 2, 1, "", "get_molar_composition"], [10, 2, 1, "", "get_molar_mass"], [10, 2, 1, "", "get_nbp"], [10, 2, 1, "", "get_odp"], [10, 2, 1, "", "get_safety"], [10, 2, 1, "", "get_sat_vap_pressure"], [10, 2, 1, "", "get_triple_point"], [10, 2, 1, "", "get_version"], [10, 2, 1, "", "is_mixture"], [10, 2, 1, "", "set_error_flag"], [10, 2, 1, "", "set_warning_flag"], [10, 2, 1, "", "terminate"]], "vclibpy.media.ThermodynamicState": [[10, 2, 1, "", "get_pretty_print"]], "vclibpy.media.TransportProperties": [[10, 2, 1, "", "get_pretty_print"]], "vclibpy.media.cool_prop": [[10, 1, 1, "", "CoolProp"]], "vclibpy.media.cool_prop.CoolProp": [[10, 2, 1, "", "calc_state"], [10, 2, 1, "", "calc_transport_properties"], [10, 2, 1, "", "get_critical_point"], [10, 2, 1, "", "get_molar_mass"]], "vclibpy.media.media": [[10, 1, 1, "", "MedProp"], [10, 4, 1, "", "get_two_phase_limits"]], "vclibpy.media.media.MedProp": [[10, 2, 1, "", "calc_mean_transport_properties"], [10, 2, 1, "", "calc_state"], [10, 2, 1, "", "calc_transport_properties"], [10, 2, 1, "", "get_critical_point"], [10, 2, 1, "", "get_molar_mass"], [10, 2, 1, "", "get_two_phase_limits"], [10, 2, 1, "", "terminate"]], "vclibpy.media.ref_prop": [[10, 1, 1, "", "RefProp"]], "vclibpy.media.ref_prop.RefProp": [[10, 2, 1, "", "calc_satliq_state"], [10, 2, 1, "", "calc_state"], [10, 2, 1, "", "calc_transport_properties"], [10, 2, 1, "", "get_available_substances"], [10, 2, 1, "", "get_comp_names"], [10, 2, 1, "", "get_critical_point"], [10, 2, 1, "", "get_def_limits"], [10, 2, 1, "", "get_dll_path"], [10, 2, 1, "", "get_fluid_name"], [10, 2, 1, "", "get_gwp"], [10, 2, 1, "", "get_longname"], [10, 2, 1, "", "get_mass_fraction"], [10, 2, 1, "", "get_mol_fraction"], [10, 2, 1, "", "get_molar_composition"], [10, 2, 1, "", "get_molar_mass"], [10, 2, 1, "", "get_nbp"], [10, 2, 1, "", "get_odp"], [10, 2, 1, "", "get_safety"], [10, 2, 1, "", "get_sat_vap_pressure"], [10, 2, 1, "", "get_triple_point"], [10, 2, 1, "", "get_version"], [10, 2, 1, "", "is_mixture"], [10, 2, 1, "", "set_error_flag"], [10, 2, 1, "", "set_warning_flag"], [10, 2, 1, "", "terminate"]], "vclibpy.media.states": [[10, 1, 1, "", "ThermodynamicState"], [10, 1, 1, "", "TransportProperties"]], "vclibpy.media.states.ThermodynamicState": [[10, 2, 1, "", "get_pretty_print"]], "vclibpy.media.states.TransportProperties": [[10, 2, 1, "", "get_pretty_print"]], "vclibpy.utils": [[11, 0, 0, "-", "automation"], [11, 0, 0, "-", "nominal_design"], [11, 0, 0, "-", "plotting"], [11, 0, 0, "-", "printing"], [11, 0, 0, "-", "sdf_"]], "vclibpy.utils.automation": [[11, 4, 1, "", "calc_multiple_states"], [11, 4, 1, "", "full_factorial_map_generation"]], "vclibpy.utils.nominal_design": [[11, 4, 1, "", "nominal_design"]], "vclibpy.utils.plotting": [[11, 4, 1, "", "plot_cycle"], [11, 4, 1, "", "plot_sdf_map"], [11, 4, 1, "", "set_axis_style"]], "vclibpy.utils.printing": [[11, 4, 1, "", "print_states"]], "vclibpy.utils.sdf_": [[11, 4, 1, "", "merge_sdfs"], [11, 4, 1, "", "save_to_sdf"], [11, 4, 1, "", "sdf_to_csv"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"contribut": 0, "user": 0, "develop": 0, "styleguid": 0, "document": [0, 19], "unit": 0, "test": 0, "pylint": 0, "vclibpi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 19], "packag": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "subpackag": [2, 4, 7], "submodul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "datamodel": 2, "modul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], "algorithm": 3, "base": [3, 9], "fsolv": 3, "iter": [3, 15], "compon": [4, 5, 6, 7, 8], "phase_separ": 4, "compressor": [5, 13], "constant_effectiv": 5, "rotari": 5, "ten_coeffici": 5, "expansion_valv": 6, "bernoulli": 6, "heat_exchang": [7, 8], "econom": [7, 18], "ihx_ntu": 7, "moving_boundary_tm": 7, "moving_boundary_ntu": 7, "ntu": 7, "util": [7, 11], "heat_transf": 8, "air_to_wal": 8, "constant": 8, "pipe_to_wal": 8, "vdi_atlas_air_to_wal": 8, "vdi_atlas_plate_h": 8, "wall": 8, "flowsheet": 9, "ihx": 9, "standard": [9, 17], "gener": 9, "assumpt": 9, "vapor_inject": 9, "note": [9, 10], "vapor_injection_econom": 9, "addit": 9, "vapor_injection_phase_separ": 9, "media": 10, "how": [10, 19], "us": [10, 18], "refprop": 10, "wrapper": 10, "version": [10, 20], "paramet": 10, "return": 10, "cool_prop": 10, "ref_prop": 10, "state": [10, 13], "autom": 11, "interactive_visu": 11, "nominal_design": 11, "plot": [11, 12, 15], "print": 11, "sdf_": 11, "ten_coefficient_compressor_reqress": 11, "refriger": 12, "data": 12, "exampl": [12, 13, 15, 16, 17, 18], "thermodynamicst": 12, "calcul": 12, "transportproperti": 12, "outlet": 13, "mass": 13, "flow": 13, "rate": 13, "electr": 13, "power": 13, "consumpt": 13, "input": 14, "flowsheetst": 14, "heatexchangerinput": 14, "control": 14, "ad": 14, "new": 14, "heat": [15, 17, 18], "exchang": 15, "implement": 15, "your": 15, "own": 15, "pinch": 15, "expans": 16, "valv": 16, "open": 16, "pump": [17, 18], "cycl": 17, "vapor": 18, "inject": 18, "phase": 18, "separ": 18, "an": 18, "about": 19, "vclibi": 19, "instal": 19, "get": 19, "start": 19, "cite": 19, "relat": 19, "public": 19, "problem": 19, "acknowledg": 19, "indic": 19, "tabl": 19, "histori": 20}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Contribute as a user": [[0, "contribute-as-a-user"]], "Contribute as a developer": [[0, "contribute-as-a-developer"]], "Styleguide": [[0, "styleguide"]], "Documentation": [[0, "documentation"], [19, "documentation"]], "Unit-Tests": [[0, "unit-tests"]], "Pylint": [[0, "pylint"]], "vclibpy": [[1, "vclibpy"]], "vclibpy package": [[2, "module-vclibpy"]], "Subpackages": [[2, "subpackages"], [4, "subpackages"], [7, "subpackages"]], "Submodules": [[2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"]], "vclibpy.datamodels module": [[2, "module-vclibpy.datamodels"]], "vclibpy.algorithms package": [[3, "module-vclibpy.algorithms"]], "vclibpy.algorithms.base module": [[3, "module-vclibpy.algorithms.base"]], "vclibpy.algorithms.fsolve module": [[3, "module-vclibpy.algorithms.fsolve"]], "vclibpy.algorithms.iteration module": [[3, "module-vclibpy.algorithms.iteration"]], "vclibpy.components package": [[4, "module-vclibpy.components"]], "vclibpy.components.component module": [[4, "module-vclibpy.components.component"]], "vclibpy.components.phase_separator module": [[4, "module-vclibpy.components.phase_separator"]], "vclibpy.components.compressors package": [[5, "module-vclibpy.components.compressors"]], "vclibpy.components.compressors.compressor module": [[5, "module-vclibpy.components.compressors.compressor"]], "vclibpy.components.compressors.constant_effectivness module": [[5, "module-vclibpy.components.compressors.constant_effectivness"]], "vclibpy.components.compressors.rotary module": [[5, "module-vclibpy.components.compressors.rotary"]], "vclibpy.components.compressors.ten_coefficient module": [[5, "module-vclibpy.components.compressors.ten_coefficient"]], "vclibpy.components.expansion_valves package": [[6, "module-vclibpy.components.expansion_valves"]], "vclibpy.components.expansion_valves.bernoulli module": [[6, "module-vclibpy.components.expansion_valves.bernoulli"]], "vclibpy.components.expansion_valves.expansion_valve module": [[6, "module-vclibpy.components.expansion_valves.expansion_valve"]], "vclibpy.components.heat_exchangers package": [[7, "module-vclibpy.components.heat_exchangers"]], "vclibpy.components.heat_exchangers.economizer module": [[7, "module-vclibpy.components.heat_exchangers.economizer"]], "vclibpy.components.heat_exchangers.heat_exchanger module": [[7, "module-vclibpy.components.heat_exchangers.heat_exchanger"]], "vclibpy.components.heat_exchangers.ihx_ntu module": [[7, "module-vclibpy.components.heat_exchangers.ihx_ntu"]], "vclibpy.components.heat_exchangers.moving_boundary_Tm module": [[7, "module-vclibpy.components.heat_exchangers.moving_boundary_Tm"]], "vclibpy.components.heat_exchangers.moving_boundary_ntu module": [[7, "module-vclibpy.components.heat_exchangers.moving_boundary_ntu"]], "vclibpy.components.heat_exchangers.ntu module": [[7, "module-vclibpy.components.heat_exchangers.ntu"]], "vclibpy.components.heat_exchangers.utils module": [[7, "module-vclibpy.components.heat_exchangers.utils"]], "vclibpy.components.heat_exchangers.heat_transfer package": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer"]], "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall module": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.air_to_wall"]], "vclibpy.components.heat_exchangers.heat_transfer.constant module": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.constant"]], "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer module": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.heat_transfer"]], "vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall module": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall module": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he module": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he"]], "vclibpy.components.heat_exchangers.heat_transfer.wall module": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.wall"]], "vclibpy.flowsheets package": [[9, "module-vclibpy.flowsheets"]], "vclibpy.flowsheets.base module": [[9, "module-vclibpy.flowsheets.base"]], "vclibpy.flowsheets.ihx module": [[9, "module-vclibpy.flowsheets.ihx"]], "vclibpy.flowsheets.standard module": [[9, "module-vclibpy.flowsheets.standard"]], "General Assumptions:": [[9, "general-assumptions"]], "vclibpy.flowsheets.vapor_injection module": [[9, "module-vclibpy.flowsheets.vapor_injection"]], "Notes": [[9, "notes"], [9, "id1"], [9, "id3"]], "vclibpy.flowsheets.vapor_injection_economizer module": [[9, "module-vclibpy.flowsheets.vapor_injection_economizer"]], "Additional Assumptions:": [[9, "additional-assumptions"], [9, "id2"]], "vclibpy.flowsheets.vapor_injection_phase_separator module": [[9, "module-vclibpy.flowsheets.vapor_injection_phase_separator"]], "vclibpy.media package": [[10, "module-vclibpy.media"]], "How to use RefProp-Wrapper:": [[10, "how-to-use-refprop-wrapper"], [10, "id17"]], "Version notes:": [[10, "version-notes"], [10, "id18"]], "Notes:": [[10, "notes"], [10, "id19"]], "Parameters:": [[10, "parameters"], [10, "id1"], [10, "id3"], [10, "id20"], [10, "id22"], [10, "id24"]], "Return:": [[10, "return"], [10, "id2"], [10, "id4"], [10, "id5"], [10, "id6"], [10, "id7"], [10, "id8"], [10, "id9"], [10, "id10"], [10, "id11"], [10, "id12"], [10, "id13"], [10, "id14"], [10, "id15"], [10, "id16"], [10, "id21"], [10, "id23"], [10, "id25"], [10, "id26"], [10, "id27"], [10, "id28"], [10, "id29"], [10, "id30"], [10, "id31"], [10, "id32"], [10, "id33"], [10, "id34"], [10, "id35"], [10, "id36"], [10, "id37"]], "vclibpy.media.cool_prop module": [[10, "module-vclibpy.media.cool_prop"]], "vclibpy.media.media module": [[10, "module-vclibpy.media.media"]], "vclibpy.media.ref_prop module": [[10, "module-vclibpy.media.ref_prop"]], "vclibpy.media.states module": [[10, "module-vclibpy.media.states"]], "vclibpy.utils package": [[11, "module-vclibpy.utils"]], "vclibpy.utils.automation module": [[11, "module-vclibpy.utils.automation"]], "vclibpy.utils.interactive_visualization module": [[11, "vclibpy-utils-interactive-visualization-module"]], "vclibpy.utils.nominal_design module": [[11, "module-vclibpy.utils.nominal_design"]], "vclibpy.utils.plotting module": [[11, "module-vclibpy.utils.plotting"]], "vclibpy.utils.printing module": [[11, "module-vclibpy.utils.printing"]], "vclibpy.utils.sdf_ module": [[11, "module-vclibpy.utils.sdf_"]], "vclibpy.utils.ten_coefficient_compressor_reqression module": [[11, "vclibpy-utils-ten-coefficient-compressor-reqression-module"]], "Refrigerant Data Example": [[12, "refrigerant-data-example"]], "ThermodynamicState calculation": [[12, "thermodynamicstate-calculation"]], "TransportProperties calculation": [[12, "transportproperties-calculation"]], "Plotting": [[12, "plotting"]], "Compressor Example": [[13, "compressor-example"]], "Outlet state": [[13, "outlet-state"]], "Mass flow rate": [[13, "mass-flow-rate"]], "Electrical power consumption": [[13, "electrical-power-consumption"]], "Inputs and FlowsheetState": [[14, "inputs-and-flowsheetstate"]], "Inputs": [[14, "inputs"]], "HeatExchangerInputs": [[14, "heatexchangerinputs"]], "Control inputs": [[14, "control-inputs"]], "Adding new inputs": [[14, "adding-new-inputs"]], "FlowsheetState": [[14, "flowsheetstate"]], "Heat Exchanger Example": [[15, "heat-exchanger-example"]], "Heat exchanger iterations": [[15, "heat-exchanger-iterations"]], "Implement your own iteration": [[15, "implement-your-own-iteration"]], "Pinch plotting": [[15, "pinch-plotting"]], "Expansion Valve Example": [[16, "expansion-valve-example"]], "Valve opening:": [[16, "valve-opening"]], "Example for a heat pump with a standard cycle": [[17, "example-for-a-heat-pump-with-a-standard-cycle"]], "Example for a heat pump with vapor injection using a phase separator": [[18, "example-for-a-heat-pump-with-vapor-injection-using-a-phase-separator"]], "Vapor injection with an economizer.": [[18, "vapor-injection-with-an-economizer"]], "About vcliby": [[19, "about-vcliby"]], "VCLibPy": [[19, "vclibpy"]], "Installation": [[19, "installation"]], "How to get started?": [[19, "how-to-get-started"]], "How to cite vclibpy": [[19, "how-to-cite-vclibpy"]], "Related publications": [[19, "related-publications"]], "Problems?": [[19, "problems"]], "Acknowledgements": [[19, "acknowledgements"]], "Indices and tables": [[19, "indices-and-tables"]], "Version History": [[20, "version-history"]]}, "indexentries": {"condenserpowercontrol (class in vclibpy.datamodels)": [[2, "vclibpy.datamodels.CondenserPowerControl"]], "controlinputs (class in vclibpy.datamodels)": [[2, "vclibpy.datamodels.ControlInputs"]], "flowsheetstate (class in vclibpy.datamodels)": [[2, "vclibpy.datamodels.FlowsheetState"]], "heatexchangerinputs (class in vclibpy.datamodels)": [[2, "vclibpy.datamodels.HeatExchangerInputs"]], "inputs (class in vclibpy.datamodels)": [[2, "vclibpy.datamodels.Inputs"]], "relativecompressorspeedcontrol (class in vclibpy.datamodels)": [[2, "vclibpy.datamodels.RelativeCompressorSpeedControl"]], "t (vclibpy.datamodels.heatexchangerinputs property)": [[2, "vclibpy.datamodels.HeatExchangerInputs.T"]], "variable (class in vclibpy.datamodels)": [[2, "vclibpy.datamodels.Variable"]], "variablecontainer (class in vclibpy.datamodels)": [[2, "vclibpy.datamodels.VariableContainer"]], "add_inputs_to_fs_state() (vclibpy.datamodels.inputs method)": [[2, "vclibpy.datamodels.Inputs.add_inputs_to_fs_state"]], "convert_to_str_value_format() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.convert_to_str_value_format"]], "copy() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.copy"]], "description (vclibpy.datamodels.variable attribute)": [[2, "vclibpy.datamodels.Variable.description"]], "get() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.get"]], "get_all_inputs() (vclibpy.datamodels.heatexchangerinputs method)": [[2, "vclibpy.datamodels.HeatExchangerInputs.get_all_inputs"]], "get_name() (vclibpy.datamodels.inputs method)": [[2, "vclibpy.datamodels.Inputs.get_name"]], "get_name() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.get_name"]], "get_variable_names() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.get_variable_names"]], "get_variables() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.get_variables"]], "items() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.items"]], "items_not_none() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.items_not_none"]], "module": [[2, "module-vclibpy"], [2, "module-vclibpy.datamodels"], [3, "module-vclibpy.algorithms"], [3, "module-vclibpy.algorithms.base"], [3, "module-vclibpy.algorithms.fsolve"], [3, "module-vclibpy.algorithms.iteration"], [4, "module-vclibpy.components"], [4, "module-vclibpy.components.component"], [4, "module-vclibpy.components.phase_separator"], [5, "module-vclibpy.components.compressors"], [5, "module-vclibpy.components.compressors.compressor"], [5, "module-vclibpy.components.compressors.constant_effectivness"], [5, "module-vclibpy.components.compressors.rotary"], [5, "module-vclibpy.components.compressors.ten_coefficient"], [6, "module-vclibpy.components.expansion_valves"], [6, "module-vclibpy.components.expansion_valves.bernoulli"], [6, "module-vclibpy.components.expansion_valves.expansion_valve"], [7, "module-vclibpy.components.heat_exchangers"], [7, "module-vclibpy.components.heat_exchangers.economizer"], [7, "module-vclibpy.components.heat_exchangers.heat_exchanger"], [7, "module-vclibpy.components.heat_exchangers.ihx_ntu"], [7, "module-vclibpy.components.heat_exchangers.moving_boundary_Tm"], [7, "module-vclibpy.components.heat_exchangers.moving_boundary_ntu"], [7, "module-vclibpy.components.heat_exchangers.ntu"], [7, "module-vclibpy.components.heat_exchangers.utils"], [8, "module-vclibpy.components.heat_exchangers.heat_transfer"], [8, "module-vclibpy.components.heat_exchangers.heat_transfer.air_to_wall"], [8, "module-vclibpy.components.heat_exchangers.heat_transfer.constant"], [8, "module-vclibpy.components.heat_exchangers.heat_transfer.heat_transfer"], [8, "module-vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall"], [8, "module-vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall"], [8, "module-vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he"], [8, "module-vclibpy.components.heat_exchangers.heat_transfer.wall"], [9, "module-vclibpy.flowsheets"], [9, "module-vclibpy.flowsheets.base"], [9, "module-vclibpy.flowsheets.ihx"], [9, "module-vclibpy.flowsheets.standard"], [9, "module-vclibpy.flowsheets.vapor_injection"], [9, "module-vclibpy.flowsheets.vapor_injection_economizer"], [9, "module-vclibpy.flowsheets.vapor_injection_phase_separator"], [10, "module-vclibpy.media"], [10, "module-vclibpy.media.cool_prop"], [10, "module-vclibpy.media.media"], [10, "module-vclibpy.media.ref_prop"], [10, "module-vclibpy.media.states"], [11, "module-vclibpy.utils"], [11, "module-vclibpy.utils.automation"], [11, "module-vclibpy.utils.nominal_design"], [11, "module-vclibpy.utils.plotting"], [11, "module-vclibpy.utils.printing"], [11, "module-vclibpy.utils.sdf_"]], "name (vclibpy.datamodels.variable attribute)": [[2, "vclibpy.datamodels.Variable.name"]], "set() (vclibpy.datamodels.variablecontainer method)": [[2, "vclibpy.datamodels.VariableContainer.set"]], "unit (vclibpy.datamodels.variable attribute)": [[2, "vclibpy.datamodels.Variable.unit"]], "value (vclibpy.datamodels.variable attribute)": [[2, "vclibpy.datamodels.Variable.value"]], "vclibpy": [[2, "module-vclibpy"]], "vclibpy.datamodels": [[2, "module-vclibpy.datamodels"]], "algorithm (class in vclibpy.algorithms.base)": [[3, "vclibpy.algorithms.base.Algorithm"]], "fsolve (class in vclibpy.algorithms.fsolve)": [[3, "vclibpy.algorithms.fsolve.FSolve"]], "iteration (class in vclibpy.algorithms.iteration)": [[3, "vclibpy.algorithms.iteration.Iteration"]], "calc_steady_state() (vclibpy.algorithms.base.algorithm method)": [[3, "vclibpy.algorithms.base.Algorithm.calc_steady_state"]], "calc_steady_state() (vclibpy.algorithms.fsolve.fsolve method)": [[3, "vclibpy.algorithms.fsolve.FSolve.calc_steady_state"]], "calc_steady_state() (vclibpy.algorithms.iteration.iteration method)": [[3, "vclibpy.algorithms.iteration.Iteration.calc_steady_state"]], "get_improved_start_condensing_pressure() (vclibpy.algorithms.base.algorithm method)": [[3, "vclibpy.algorithms.base.Algorithm.get_improved_start_condensing_pressure"]], "initial_setup() (vclibpy.algorithms.base.algorithm method)": [[3, "vclibpy.algorithms.base.Algorithm.initial_setup"]], "vclibpy.algorithms": [[3, "module-vclibpy.algorithms"]], "vclibpy.algorithms.base": [[3, "module-vclibpy.algorithms.base"]], "vclibpy.algorithms.fsolve": [[3, "module-vclibpy.algorithms.fsolve"]], "vclibpy.algorithms.iteration": [[3, "module-vclibpy.algorithms.iteration"]], "basecomponent (class in vclibpy.components.component)": [[4, "vclibpy.components.component.BaseComponent"]], "fourportcomponent (class in vclibpy.components.component)": [[4, "vclibpy.components.component.FourPortComponent"]], "phaseseparator (class in vclibpy.components.phase_separator)": [[4, "vclibpy.components.phase_separator.PhaseSeparator"]], "twoportcomponent (class in vclibpy.components.component)": [[4, "vclibpy.components.component.TwoPortComponent"]], "m_flow (vclibpy.components.component.twoportcomponent property)": [[4, "vclibpy.components.component.TwoPortComponent.m_flow"]], "m_flow_high (vclibpy.components.component.fourportcomponent property)": [[4, "vclibpy.components.component.FourPortComponent.m_flow_high"]], "m_flow_low (vclibpy.components.component.fourportcomponent property)": [[4, "vclibpy.components.component.FourPortComponent.m_flow_low"]], "med_prop (vclibpy.components.component.basecomponent property)": [[4, "vclibpy.components.component.BaseComponent.med_prop"]], "state_inlet (vclibpy.components.component.twoportcomponent property)": [[4, "vclibpy.components.component.TwoPortComponent.state_inlet"]], "state_inlet (vclibpy.components.phase_separator.phaseseparator property)": [[4, "vclibpy.components.phase_separator.PhaseSeparator.state_inlet"]], "state_inlet_high (vclibpy.components.component.fourportcomponent property)": [[4, "vclibpy.components.component.FourPortComponent.state_inlet_high"]], "state_inlet_low (vclibpy.components.component.fourportcomponent property)": [[4, "vclibpy.components.component.FourPortComponent.state_inlet_low"]], "state_outlet (vclibpy.components.component.twoportcomponent property)": [[4, "vclibpy.components.component.TwoPortComponent.state_outlet"]], "state_outlet (vclibpy.components.phase_separator.phaseseparator property)": [[4, "vclibpy.components.phase_separator.PhaseSeparator.state_outlet"]], "state_outlet_high (vclibpy.components.component.fourportcomponent property)": [[4, "vclibpy.components.component.FourPortComponent.state_outlet_high"]], "state_outlet_liquid (vclibpy.components.phase_separator.phaseseparator property)": [[4, "vclibpy.components.phase_separator.PhaseSeparator.state_outlet_liquid"]], "state_outlet_low (vclibpy.components.component.fourportcomponent property)": [[4, "vclibpy.components.component.FourPortComponent.state_outlet_low"]], "state_outlet_vapor (vclibpy.components.phase_separator.phaseseparator property)": [[4, "vclibpy.components.phase_separator.PhaseSeparator.state_outlet_vapor"]], "vclibpy.components": [[4, "module-vclibpy.components"]], "vclibpy.components.component": [[4, "module-vclibpy.components.component"]], "vclibpy.components.phase_separator": [[4, "module-vclibpy.components.phase_separator"]], "basetencoefficientcompressor (class in vclibpy.components.compressors.ten_coefficient)": [[5, "vclibpy.components.compressors.ten_coefficient.BaseTenCoefficientCompressor"]], "compressor (class in vclibpy.components.compressors.compressor)": [[5, "vclibpy.components.compressors.compressor.Compressor"]], "constanteffectivenesscompressor (class in vclibpy.components.compressors.constant_effectivness)": [[5, "vclibpy.components.compressors.constant_effectivness.ConstantEffectivenessCompressor"]], "datasheetcompressor (class in vclibpy.components.compressors.ten_coefficient)": [[5, "vclibpy.components.compressors.ten_coefficient.DataSheetCompressor"]], "rotarycompressor (class in vclibpy.components.compressors.rotary)": [[5, "vclibpy.components.compressors.rotary.RotaryCompressor"]], "tencoefficientcompressor (class in vclibpy.components.compressors.ten_coefficient)": [[5, "vclibpy.components.compressors.ten_coefficient.TenCoefficientCompressor"]], "calc_electrical_power() (vclibpy.components.compressors.compressor.compressor method)": [[5, "vclibpy.components.compressors.compressor.Compressor.calc_electrical_power"]], "calc_m_flow() (vclibpy.components.compressors.compressor.compressor method)": [[5, "vclibpy.components.compressors.compressor.Compressor.calc_m_flow"]], "calc_state_outlet() (vclibpy.components.compressors.compressor.compressor method)": [[5, "vclibpy.components.compressors.compressor.Compressor.calc_state_outlet"]], "calc_ten_coefficients() (in module vclibpy.components.compressors.ten_coefficient)": [[5, "vclibpy.components.compressors.ten_coefficient.calc_ten_coefficients"]], "get_eta_isentropic() (vclibpy.components.compressors.compressor.compressor method)": [[5, "vclibpy.components.compressors.compressor.Compressor.get_eta_isentropic"]], "get_eta_isentropic() (vclibpy.components.compressors.constant_effectivness.constanteffectivenesscompressor method)": [[5, "vclibpy.components.compressors.constant_effectivness.ConstantEffectivenessCompressor.get_eta_isentropic"]], "get_eta_isentropic() (vclibpy.components.compressors.rotary.rotarycompressor method)": [[5, "vclibpy.components.compressors.rotary.RotaryCompressor.get_eta_isentropic"]], "get_eta_isentropic() (vclibpy.components.compressors.ten_coefficient.datasheetcompressor method)": [[5, "vclibpy.components.compressors.ten_coefficient.DataSheetCompressor.get_eta_isentropic"]], "get_eta_isentropic() (vclibpy.components.compressors.ten_coefficient.tencoefficientcompressor method)": [[5, "vclibpy.components.compressors.ten_coefficient.TenCoefficientCompressor.get_eta_isentropic"]], "get_eta_mech() (vclibpy.components.compressors.compressor.compressor method)": [[5, "vclibpy.components.compressors.compressor.Compressor.get_eta_mech"]], "get_eta_mech() (vclibpy.components.compressors.constant_effectivness.constanteffectivenesscompressor method)": [[5, "vclibpy.components.compressors.constant_effectivness.ConstantEffectivenessCompressor.get_eta_mech"]], "get_eta_mech() (vclibpy.components.compressors.rotary.rotarycompressor method)": [[5, "vclibpy.components.compressors.rotary.RotaryCompressor.get_eta_mech"]], "get_eta_mech() (vclibpy.components.compressors.ten_coefficient.datasheetcompressor method)": [[5, "vclibpy.components.compressors.ten_coefficient.DataSheetCompressor.get_eta_mech"]], "get_eta_mech() (vclibpy.components.compressors.ten_coefficient.tencoefficientcompressor method)": [[5, "vclibpy.components.compressors.ten_coefficient.TenCoefficientCompressor.get_eta_mech"]], "get_lambda_h() (vclibpy.components.compressors.compressor.compressor method)": [[5, "vclibpy.components.compressors.compressor.Compressor.get_lambda_h"]], "get_lambda_h() (vclibpy.components.compressors.constant_effectivness.constanteffectivenesscompressor method)": [[5, "vclibpy.components.compressors.constant_effectivness.ConstantEffectivenessCompressor.get_lambda_h"]], "get_lambda_h() (vclibpy.components.compressors.rotary.rotarycompressor method)": [[5, "vclibpy.components.compressors.rotary.RotaryCompressor.get_lambda_h"]], "get_lambda_h() (vclibpy.components.compressors.ten_coefficient.datasheetcompressor method)": [[5, "vclibpy.components.compressors.ten_coefficient.DataSheetCompressor.get_lambda_h"]], "get_lambda_h() (vclibpy.components.compressors.ten_coefficient.tencoefficientcompressor method)": [[5, "vclibpy.components.compressors.ten_coefficient.TenCoefficientCompressor.get_lambda_h"]], "get_n_absolute() (vclibpy.components.compressors.compressor.compressor method)": [[5, "vclibpy.components.compressors.compressor.Compressor.get_n_absolute"]], "get_p_outlet() (vclibpy.components.compressors.compressor.compressor method)": [[5, "vclibpy.components.compressors.compressor.Compressor.get_p_outlet"]], "get_parameter() (vclibpy.components.compressors.ten_coefficient.basetencoefficientcompressor method)": [[5, "vclibpy.components.compressors.ten_coefficient.BaseTenCoefficientCompressor.get_parameter"]], "linear_interpolate_extrapolate() (in module vclibpy.components.compressors.ten_coefficient)": [[5, "vclibpy.components.compressors.ten_coefficient.linear_interpolate_extrapolate"]], "vclibpy.components.compressors": [[5, "module-vclibpy.components.compressors"]], "vclibpy.components.compressors.compressor": [[5, "module-vclibpy.components.compressors.compressor"]], "vclibpy.components.compressors.constant_effectivness": [[5, "module-vclibpy.components.compressors.constant_effectivness"]], "vclibpy.components.compressors.rotary": [[5, "module-vclibpy.components.compressors.rotary"]], "vclibpy.components.compressors.ten_coefficient": [[5, "module-vclibpy.components.compressors.ten_coefficient"]], "bernoulli (class in vclibpy.components.expansion_valves.bernoulli)": [[6, "vclibpy.components.expansion_valves.bernoulli.Bernoulli"]], "expansionvalve (class in vclibpy.components.expansion_valves.expansion_valve)": [[6, "vclibpy.components.expansion_valves.expansion_valve.ExpansionValve"]], "calc_m_flow_at_opening() (vclibpy.components.expansion_valves.bernoulli.bernoulli method)": [[6, "vclibpy.components.expansion_valves.bernoulli.Bernoulli.calc_m_flow_at_opening"]], "calc_m_flow_at_opening() (vclibpy.components.expansion_valves.expansion_valve.expansionvalve method)": [[6, "vclibpy.components.expansion_valves.expansion_valve.ExpansionValve.calc_m_flow_at_opening"]], "calc_opening_at_m_flow() (vclibpy.components.expansion_valves.bernoulli.bernoulli method)": [[6, "vclibpy.components.expansion_valves.bernoulli.Bernoulli.calc_opening_at_m_flow"]], "calc_opening_at_m_flow() (vclibpy.components.expansion_valves.expansion_valve.expansionvalve method)": [[6, "vclibpy.components.expansion_valves.expansion_valve.ExpansionValve.calc_opening_at_m_flow"]], "calc_outlet() (vclibpy.components.expansion_valves.expansion_valve.expansionvalve method)": [[6, "vclibpy.components.expansion_valves.expansion_valve.ExpansionValve.calc_outlet"]], "calc_outlet_pressure_at_m_flow_and_opening() (vclibpy.components.expansion_valves.bernoulli.bernoulli method)": [[6, "vclibpy.components.expansion_valves.bernoulli.Bernoulli.calc_outlet_pressure_at_m_flow_and_opening"]], "calc_outlet_pressure_at_m_flow_and_opening() (vclibpy.components.expansion_valves.expansion_valve.expansionvalve method)": [[6, "vclibpy.components.expansion_valves.expansion_valve.ExpansionValve.calc_outlet_pressure_at_m_flow_and_opening"]], "vclibpy.components.expansion_valves": [[6, "module-vclibpy.components.expansion_valves"]], "vclibpy.components.expansion_valves.bernoulli": [[6, "module-vclibpy.components.expansion_valves.bernoulli"]], "vclibpy.components.expansion_valves.expansion_valve": [[6, "module-vclibpy.components.expansion_valves.expansion_valve"]], "externalheatexchanger (class in vclibpy.components.heat_exchangers.heat_exchanger)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger"]], "heatexchanger (class in vclibpy.components.heat_exchangers.heat_exchanger)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.HeatExchanger"]], "ihx_ntu (class in vclibpy.components.heat_exchangers.ihx_ntu)": [[7, "vclibpy.components.heat_exchangers.ihx_ntu.IHX_NTU"]], "internalheatexchanger (class in vclibpy.components.heat_exchangers.heat_exchanger)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.InternalHeatExchanger"]], "movingboundaryntucondenser (class in vclibpy.components.heat_exchangers.moving_boundary_ntu)": [[7, "vclibpy.components.heat_exchangers.moving_boundary_ntu.MovingBoundaryNTUCondenser"]], "movingboundaryntuevaporator (class in vclibpy.components.heat_exchangers.moving_boundary_ntu)": [[7, "vclibpy.components.heat_exchangers.moving_boundary_ntu.MovingBoundaryNTUEvaporator"]], "movingboundarytmcondenser (class in vclibpy.components.heat_exchangers.moving_boundary_tm)": [[7, "vclibpy.components.heat_exchangers.moving_boundary_Tm.MovingBoundaryTmCondenser"]], "movingboundarytmevaporator (class in vclibpy.components.heat_exchangers.moving_boundary_tm)": [[7, "vclibpy.components.heat_exchangers.moving_boundary_Tm.MovingBoundaryTmEvaporator"]], "vaporinjectioneconomizerntu (class in vclibpy.components.heat_exchangers.economizer)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU"]], "calc() (vclibpy.components.heat_exchangers.economizer.vaporinjectioneconomizerntu method)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU.calc"]], "calc() (vclibpy.components.heat_exchangers.heat_exchanger.heatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.HeatExchanger.calc"]], "calc() (vclibpy.components.heat_exchangers.ihx_ntu.ihx_ntu method)": [[7, "vclibpy.components.heat_exchangers.ihx_ntu.IHX_NTU.calc"]], "calc() (vclibpy.components.heat_exchangers.moving_boundary_tm.movingboundarytmcondenser method)": [[7, "vclibpy.components.heat_exchangers.moving_boundary_Tm.MovingBoundaryTmCondenser.calc"]], "calc() (vclibpy.components.heat_exchangers.moving_boundary_tm.movingboundarytmevaporator method)": [[7, "vclibpy.components.heat_exchangers.moving_boundary_Tm.MovingBoundaryTmEvaporator.calc"]], "calc() (vclibpy.components.heat_exchangers.moving_boundary_ntu.movingboundaryntucondenser method)": [[7, "vclibpy.components.heat_exchangers.moving_boundary_ntu.MovingBoundaryNTUCondenser.calc"]], "calc() (vclibpy.components.heat_exchangers.moving_boundary_ntu.movingboundaryntuevaporator method)": [[7, "vclibpy.components.heat_exchangers.moving_boundary_ntu.MovingBoundaryNTUEvaporator.calc"]], "calc_ntu() (in module vclibpy.components.heat_exchangers.ntu)": [[7, "vclibpy.components.heat_exchangers.ntu.calc_NTU"]], "calc_q_flow() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.calc_Q_flow"]], "calc_q_ntu() (in module vclibpy.components.heat_exchangers.ntu)": [[7, "vclibpy.components.heat_exchangers.ntu.calc_Q_ntu"]], "calc_q_with_available_area() (in module vclibpy.components.heat_exchangers.ntu)": [[7, "vclibpy.components.heat_exchangers.ntu.calc_Q_with_available_area"]], "calc_r() (in module vclibpy.components.heat_exchangers.ntu)": [[7, "vclibpy.components.heat_exchangers.ntu.calc_R"]], "calc_alpha_gas() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.calc_alpha_gas"]], "calc_alpha_liquid() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.calc_alpha_liquid"]], "calc_alpha_secondary() (vclibpy.components.heat_exchangers.economizer.vaporinjectioneconomizerntu method)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU.calc_alpha_secondary"]], "calc_alpha_secondary() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.calc_alpha_secondary"]], "calc_alpha_two_phase() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.calc_alpha_two_phase"]], "calc_area() (in module vclibpy.components.heat_exchangers.utils)": [[7, "vclibpy.components.heat_exchangers.utils.calc_area"]], "calc_eps() (in module vclibpy.components.heat_exchangers.ntu)": [[7, "vclibpy.components.heat_exchangers.ntu.calc_eps"]], "calc_k() (vclibpy.components.heat_exchangers.heat_exchanger.heatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.HeatExchanger.calc_k"]], "calc_m_flow_cp_min() (in module vclibpy.components.heat_exchangers.ntu)": [[7, "vclibpy.components.heat_exchangers.ntu.calc_m_flow_cp_min"]], "calc_mean_temperature() (in module vclibpy.components.heat_exchangers.utils)": [[7, "vclibpy.components.heat_exchangers.utils.calc_mean_temperature"]], "calc_secondary_q_flow() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.calc_secondary_Q_flow"]], "calc_secondary_cp() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.calc_secondary_cp"]], "calc_transport_properties_secondary_medium() (vclibpy.components.heat_exchangers.economizer.vaporinjectioneconomizerntu method)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU.calc_transport_properties_secondary_medium"]], "calc_transport_properties_secondary_medium() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.calc_transport_properties_secondary_medium"]], "calc_wall_heat_transfer() (vclibpy.components.heat_exchangers.heat_exchanger.heatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.HeatExchanger.calc_wall_heat_transfer"]], "cp_secondary (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger property)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.cp_secondary"]], "get_condenser_phase_temperatures_and_alpha() (in module vclibpy.components.heat_exchangers.utils)": [[7, "vclibpy.components.heat_exchangers.utils.get_condenser_phase_temperatures_and_alpha"]], "iterate_area() (in module vclibpy.components.heat_exchangers.ntu)": [[7, "vclibpy.components.heat_exchangers.ntu.iterate_area"]], "m_flow_secondary (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger property)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.m_flow_secondary"]], "m_flow_secondary_cp (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger property)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.m_flow_secondary_cp"]], "plot_lmtd_vs_cold_out() (in module vclibpy.components.heat_exchangers.utils)": [[7, "vclibpy.components.heat_exchangers.utils.plot_lmtd_vs_cold_out"]], "separate_phases() (in module vclibpy.components.heat_exchangers.utils)": [[7, "vclibpy.components.heat_exchangers.utils.separate_phases"]], "set_missing_states() (vclibpy.components.heat_exchangers.ihx_ntu.ihx_ntu method)": [[7, "vclibpy.components.heat_exchangers.ihx_ntu.IHX_NTU.set_missing_states"]], "set_secondary_cp() (vclibpy.components.heat_exchangers.economizer.vaporinjectioneconomizerntu method)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU.set_secondary_cp"]], "start_secondary_med_prop() (vclibpy.components.heat_exchangers.economizer.vaporinjectioneconomizerntu method)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU.start_secondary_med_prop"]], "start_secondary_med_prop() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.start_secondary_med_prop"]], "state_two_phase_inlet (vclibpy.components.heat_exchangers.economizer.vaporinjectioneconomizerntu property)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU.state_two_phase_inlet"]], "state_two_phase_outlet (vclibpy.components.heat_exchangers.economizer.vaporinjectioneconomizerntu property)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU.state_two_phase_outlet"]], "terminate_secondary_med_prop() (vclibpy.components.heat_exchangers.economizer.vaporinjectioneconomizerntu method)": [[7, "vclibpy.components.heat_exchangers.economizer.VaporInjectionEconomizerNTU.terminate_secondary_med_prop"]], "terminate_secondary_med_prop() (vclibpy.components.heat_exchangers.heat_exchanger.externalheatexchanger method)": [[7, "vclibpy.components.heat_exchangers.heat_exchanger.ExternalHeatExchanger.terminate_secondary_med_prop"]], "vclibpy.components.heat_exchangers": [[7, "module-vclibpy.components.heat_exchangers"]], "vclibpy.components.heat_exchangers.economizer": [[7, "module-vclibpy.components.heat_exchangers.economizer"]], "vclibpy.components.heat_exchangers.heat_exchanger": [[7, "module-vclibpy.components.heat_exchangers.heat_exchanger"]], "vclibpy.components.heat_exchangers.ihx_ntu": [[7, "module-vclibpy.components.heat_exchangers.ihx_ntu"]], "vclibpy.components.heat_exchangers.moving_boundary_tm": [[7, "module-vclibpy.components.heat_exchangers.moving_boundary_Tm"]], "vclibpy.components.heat_exchangers.moving_boundary_ntu": [[7, "module-vclibpy.components.heat_exchangers.moving_boundary_ntu"]], "vclibpy.components.heat_exchangers.ntu": [[7, "module-vclibpy.components.heat_exchangers.ntu"]], "vclibpy.components.heat_exchangers.utils": [[7, "module-vclibpy.components.heat_exchangers.utils"]], "a (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.A"]], "a (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.A"]], "a_freieoberflaecherohr (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.A_FreieOberflaecheRohr"]], "a_rippen (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.A_Rippen"]], "a_rohrinnen (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.A_RohrInnen"]], "a_rohrunberippt (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.A_RohrUnberippt"]], "airsourceheatexchangergeometry (class in vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry"]], "airtowalltransfer (class in vclibpy.components.heat_exchangers.heat_transfer.air_to_wall)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.AirToWallTransfer"]], "constantheattransfer (class in vclibpy.components.heat_exchangers.heat_transfer.constant)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.constant.ConstantHeatTransfer"]], "constanttwophaseheattransfer (class in vclibpy.components.heat_exchangers.heat_transfer.constant)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.constant.ConstantTwoPhaseHeatTransfer"]], "heattransfer (class in vclibpy.components.heat_exchangers.heat_transfer.heat_transfer)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.HeatTransfer"]], "plateheatexchangergeometry (class in vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry"]], "turbulentfluidinpipetowalltransfer (class in vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall.TurbulentFluidInPipeToWallTransfer"]], "twophaseheattransfer (class in vclibpy.components.heat_exchangers.heat_transfer.heat_transfer)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.TwoPhaseHeatTransfer"]], "vdiatlasairtowalltransfer (class in vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.VDIAtlasAirToWallTransfer"]], "vdiatlasplateheattransfer (class in vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.VDIAtlasPlateHeatTransfer"]], "wsuairtowall (class in vclibpy.components.heat_exchangers.heat_transfer.air_to_wall)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.WSUAirToWall"]], "walltransfer (class in vclibpy.components.heat_exchangers.heat_transfer.wall)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.wall.WallTransfer"]], "x (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.X"]], "a (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.a"]], "alpha_s() (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.alpha_S"]], "amplitude (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.amplitude"]], "calc() (vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.airtowalltransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.AirToWallTransfer.calc"]], "calc() (vclibpy.components.heat_exchangers.heat_transfer.constant.constantheattransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.constant.ConstantHeatTransfer.calc"]], "calc() (vclibpy.components.heat_exchangers.heat_transfer.constant.constanttwophaseheattransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.constant.ConstantTwoPhaseHeatTransfer.calc"]], "calc() (vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.heattransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.HeatTransfer.calc"]], "calc() (vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.twophaseheattransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.TwoPhaseHeatTransfer.calc"]], "calc() (vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall.turbulentfluidinpipetowalltransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall.TurbulentFluidInPipeToWallTransfer.calc"]], "calc() (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.vdiatlasplateheattransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.VDIAtlasPlateHeatTransfer.calc"]], "calc() (vclibpy.components.heat_exchangers.heat_transfer.wall.walltransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.wall.WallTransfer.calc"]], "calc_laminar_area_nusselt() (vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.airtowalltransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.AirToWallTransfer.calc_laminar_area_nusselt"]], "calc_laminar_area_nusselt() (vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.wsuairtowall method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.WSUAirToWall.calc_laminar_area_nusselt"]], "calc_laminar_area_nusselt() (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.vdiatlasairtowalltransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.VDIAtlasAirToWallTransfer.calc_laminar_area_nusselt"]], "calc_reynolds() (vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.airtowalltransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.AirToWallTransfer.calc_reynolds"]], "calc_reynolds() (vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.wsuairtowall method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall.WSUAirToWall.calc_reynolds"]], "calc_reynolds() (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.vdiatlasairtowalltransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.VDIAtlasAirToWallTransfer.calc_reynolds"]], "calc_reynolds() (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.vdiatlasplateheattransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.VDIAtlasPlateHeatTransfer.calc_reynolds"]], "calc_reynolds_pipe() (in module vclibpy.components.heat_exchangers.heat_transfer.heat_transfer)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer.calc_reynolds_pipe"]], "calc_turbulent_plate_nusselt() (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.vdiatlasplateheattransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.VDIAtlasPlateHeatTransfer.calc_turbulent_plate_nusselt"]], "calc_turbulent_tube_nusselt() (vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall.turbulentfluidinpipetowalltransfer method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall.TurbulentFluidInPipeToWallTransfer.calc_turbulent_tube_nusselt"]], "char_length (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.char_length"]], "d_a (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.d_a"]], "d_h (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.d_h"]], "d_i (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.d_i"]], "dicke_rippe (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.dicke_rippe"]], "enlargement_factor (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.enlargement_factor"]], "eta_r() (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry method)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.eta_R"]], "height (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.height"]], "hoehe (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.hoehe"]], "laenge (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.laenge"]], "lambda_r (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.lambda_R"]], "lambda_w (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.lambda_w"]], "n_rippen (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.n_Rippen"]], "n_rohre (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.n_Rohre"]], "n_plates (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.n_plates"]], "phi (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.phi"]], "phi (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.phi"]], "t_l (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.t_l"]], "t_q (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.t_q"]], "tiefe (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.tiefe"]], "vclibpy.components.heat_exchangers.heat_transfer": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer"]], "vclibpy.components.heat_exchangers.heat_transfer.air_to_wall": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.air_to_wall"]], "vclibpy.components.heat_exchangers.heat_transfer.constant": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.constant"]], "vclibpy.components.heat_exchangers.heat_transfer.heat_transfer": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.heat_transfer"]], "vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.pipe_to_wall"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall"]], "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he"]], "vclibpy.components.heat_exchangers.heat_transfer.wall": [[8, "module-vclibpy.components.heat_exchangers.heat_transfer.wall"]], "verjuengungsfaktor (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.airsourceheatexchangergeometry property)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_air_to_wall.AirSourceHeatExchangerGeometry.verjuengungsfaktor"]], "wall_thickness (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.wall_thickness"]], "wave_length (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.wave_length"]], "width (vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.plateheatexchangergeometry attribute)": [[8, "vclibpy.components.heat_exchangers.heat_transfer.vdi_atlas_plate_he.PlateHeatExchangerGeometry.width"]], "basecycle (class in vclibpy.flowsheets.base)": [[9, "vclibpy.flowsheets.base.BaseCycle"]], "basevaporinjection (class in vclibpy.flowsheets.vapor_injection)": [[9, "vclibpy.flowsheets.vapor_injection.BaseVaporInjection"]], "ihx (class in vclibpy.flowsheets.ihx)": [[9, "vclibpy.flowsheets.ihx.IHX"]], "standardcycle (class in vclibpy.flowsheets.standard)": [[9, "vclibpy.flowsheets.standard.StandardCycle"]], "vaporinjectioneconomizer (class in vclibpy.flowsheets.vapor_injection_economizer)": [[9, "vclibpy.flowsheets.vapor_injection_economizer.VaporInjectionEconomizer"]], "vaporinjectionphaseseparator (class in vclibpy.flowsheets.vapor_injection_phase_separator)": [[9, "vclibpy.flowsheets.vapor_injection_phase_separator.VaporInjectionPhaseSeparator"]], "add_all_states_to_fs_state() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.add_all_states_to_fs_state"]], "calc_electrical_power() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.calc_electrical_power"]], "calc_electrical_power() (vclibpy.flowsheets.ihx.ihx method)": [[9, "vclibpy.flowsheets.ihx.IHX.calc_electrical_power"]], "calc_electrical_power() (vclibpy.flowsheets.standard.standardcycle method)": [[9, "vclibpy.flowsheets.standard.StandardCycle.calc_electrical_power"]], "calc_electrical_power() (vclibpy.flowsheets.vapor_injection.basevaporinjection method)": [[9, "vclibpy.flowsheets.vapor_injection.BaseVaporInjection.calc_electrical_power"]], "calc_injection() (vclibpy.flowsheets.vapor_injection.basevaporinjection method)": [[9, "vclibpy.flowsheets.vapor_injection.BaseVaporInjection.calc_injection"]], "calc_injection() (vclibpy.flowsheets.vapor_injection_economizer.vaporinjectioneconomizer method)": [[9, "vclibpy.flowsheets.vapor_injection_economizer.VaporInjectionEconomizer.calc_injection"]], "calc_injection() (vclibpy.flowsheets.vapor_injection_phase_separator.vaporinjectionphaseseparator method)": [[9, "vclibpy.flowsheets.vapor_injection_phase_separator.VaporInjectionPhaseSeparator.calc_injection"]], "calc_states() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.calc_states"]], "calc_states() (vclibpy.flowsheets.ihx.ihx method)": [[9, "vclibpy.flowsheets.ihx.IHX.calc_states"]], "calc_states() (vclibpy.flowsheets.standard.standardcycle method)": [[9, "vclibpy.flowsheets.standard.StandardCycle.calc_states"]], "calc_states() (vclibpy.flowsheets.vapor_injection.basevaporinjection method)": [[9, "vclibpy.flowsheets.vapor_injection.BaseVaporInjection.calc_states"]], "calculate_cycle_for_pressures() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.calculate_cycle_for_pressures"]], "calculate_outputs_for_valid_pressures() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.calculate_outputs_for_valid_pressures"]], "fill_fs_state_from_inputs() (in module vclibpy.flowsheets.base)": [[9, "vclibpy.flowsheets.base.fill_fs_state_from_inputs"]], "flowsheet_name (vclibpy.flowsheets.base.basecycle attribute)": [[9, "vclibpy.flowsheets.base.BaseCycle.flowsheet_name"]], "flowsheet_name (vclibpy.flowsheets.ihx.ihx attribute)": [[9, "vclibpy.flowsheets.ihx.IHX.flowsheet_name"]], "flowsheet_name (vclibpy.flowsheets.standard.standardcycle attribute)": [[9, "vclibpy.flowsheets.standard.StandardCycle.flowsheet_name"]], "flowsheet_name (vclibpy.flowsheets.vapor_injection.basevaporinjection attribute)": [[9, "vclibpy.flowsheets.vapor_injection.BaseVaporInjection.flowsheet_name"]], "flowsheet_name (vclibpy.flowsheets.vapor_injection_economizer.vaporinjectioneconomizer attribute)": [[9, "vclibpy.flowsheets.vapor_injection_economizer.VaporInjectionEconomizer.flowsheet_name"]], "flowsheet_name (vclibpy.flowsheets.vapor_injection_phase_separator.vaporinjectionphaseseparator attribute)": [[9, "vclibpy.flowsheets.vapor_injection_phase_separator.VaporInjectionPhaseSeparator.flowsheet_name"]], "fluid (vclibpy.flowsheets.ihx.ihx attribute)": [[9, "vclibpy.flowsheets.ihx.IHX.fluid"]], "fluid (vclibpy.flowsheets.standard.standardcycle attribute)": [[9, "vclibpy.flowsheets.standard.StandardCycle.fluid"]], "fluid (vclibpy.flowsheets.vapor_injection.basevaporinjection attribute)": [[9, "vclibpy.flowsheets.vapor_injection.BaseVaporInjection.fluid"]], "fluid (vclibpy.flowsheets.vapor_injection_economizer.vaporinjectioneconomizer attribute)": [[9, "vclibpy.flowsheets.vapor_injection_economizer.VaporInjectionEconomizer.fluid"]], "fluid (vclibpy.flowsheets.vapor_injection_phase_separator.vaporinjectionphaseseparator attribute)": [[9, "vclibpy.flowsheets.vapor_injection_phase_separator.VaporInjectionPhaseSeparator.fluid"]], "get_all_components() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.get_all_components"]], "get_all_components() (vclibpy.flowsheets.ihx.ihx method)": [[9, "vclibpy.flowsheets.ihx.IHX.get_all_components"]], "get_all_components() (vclibpy.flowsheets.standard.standardcycle method)": [[9, "vclibpy.flowsheets.standard.StandardCycle.get_all_components"]], "get_all_components() (vclibpy.flowsheets.vapor_injection.basevaporinjection method)": [[9, "vclibpy.flowsheets.vapor_injection.BaseVaporInjection.get_all_components"]], "get_all_components() (vclibpy.flowsheets.vapor_injection_economizer.vaporinjectioneconomizer method)": [[9, "vclibpy.flowsheets.vapor_injection_economizer.VaporInjectionEconomizer.get_all_components"]], "get_all_components() (vclibpy.flowsheets.vapor_injection_phase_separator.vaporinjectionphaseseparator method)": [[9, "vclibpy.flowsheets.vapor_injection_phase_separator.VaporInjectionPhaseSeparator.get_all_components"]], "get_start_condensing_pressure() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.get_start_condensing_pressure"]], "get_start_evaporating_pressure() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.get_start_evaporating_pressure"]], "get_states_in_order_for_plotting() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.get_states_in_order_for_plotting"]], "get_states_in_order_for_plotting() (vclibpy.flowsheets.ihx.ihx method)": [[9, "vclibpy.flowsheets.ihx.IHX.get_states_in_order_for_plotting"]], "get_states_in_order_for_plotting() (vclibpy.flowsheets.standard.standardcycle method)": [[9, "vclibpy.flowsheets.standard.StandardCycle.get_states_in_order_for_plotting"]], "get_states_in_order_for_plotting() (vclibpy.flowsheets.vapor_injection.basevaporinjection method)": [[9, "vclibpy.flowsheets.vapor_injection.BaseVaporInjection.get_states_in_order_for_plotting"]], "get_states_in_order_for_plotting() (vclibpy.flowsheets.vapor_injection_economizer.vaporinjectioneconomizer method)": [[9, "vclibpy.flowsheets.vapor_injection_economizer.VaporInjectionEconomizer.get_states_in_order_for_plotting"]], "get_states_in_order_for_plotting() (vclibpy.flowsheets.vapor_injection_phase_separator.vaporinjectionphaseseparator method)": [[9, "vclibpy.flowsheets.vapor_injection_phase_separator.VaporInjectionPhaseSeparator.get_states_in_order_for_plotting"]], "plot_cycle() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.plot_cycle"]], "set_condenser_outlet_based_on_subcooling() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.set_condenser_outlet_based_on_subcooling"]], "set_evaporator_outlet_based_on_superheating() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.set_evaporator_outlet_based_on_superheating"]], "set_ihx_outlet_based_on_superheating() (vclibpy.flowsheets.ihx.ihx method)": [[9, "vclibpy.flowsheets.ihx.IHX.set_ihx_outlet_based_on_superheating"]], "setup_new_fluid() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.setup_new_fluid"]], "terminate() (vclibpy.flowsheets.base.basecycle method)": [[9, "vclibpy.flowsheets.base.BaseCycle.terminate"]], "vclibpy.flowsheets": [[9, "module-vclibpy.flowsheets"]], "vclibpy.flowsheets.base": [[9, "module-vclibpy.flowsheets.base"]], "vclibpy.flowsheets.ihx": [[9, "module-vclibpy.flowsheets.ihx"]], "vclibpy.flowsheets.standard": [[9, "module-vclibpy.flowsheets.standard"]], "vclibpy.flowsheets.vapor_injection": [[9, "module-vclibpy.flowsheets.vapor_injection"]], "vclibpy.flowsheets.vapor_injection_economizer": [[9, "module-vclibpy.flowsheets.vapor_injection_economizer"]], "vclibpy.flowsheets.vapor_injection_phase_separator": [[9, "module-vclibpy.flowsheets.vapor_injection_phase_separator"]], "coolprop (class in vclibpy.media)": [[10, "vclibpy.media.CoolProp"]], "coolprop (class in vclibpy.media.cool_prop)": [[10, "vclibpy.media.cool_prop.CoolProp"]], "medprop (class in vclibpy.media)": [[10, "vclibpy.media.MedProp"]], "medprop (class in vclibpy.media.media)": [[10, "vclibpy.media.media.MedProp"]], "refprop (class in vclibpy.media)": [[10, "vclibpy.media.RefProp"]], "refprop (class in vclibpy.media.ref_prop)": [[10, "vclibpy.media.ref_prop.RefProp"]], "thermodynamicstate (class in vclibpy.media)": [[10, "vclibpy.media.ThermodynamicState"]], "thermodynamicstate (class in vclibpy.media.states)": [[10, "vclibpy.media.states.ThermodynamicState"]], "transportproperties (class in vclibpy.media)": [[10, "vclibpy.media.TransportProperties"]], "transportproperties (class in vclibpy.media.states)": [[10, "vclibpy.media.states.TransportProperties"]], "calc_mean_transport_properties() (vclibpy.media.medprop method)": [[10, "vclibpy.media.MedProp.calc_mean_transport_properties"]], "calc_mean_transport_properties() (vclibpy.media.media.medprop method)": [[10, "vclibpy.media.media.MedProp.calc_mean_transport_properties"]], "calc_satliq_state() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.calc_satliq_state"]], "calc_satliq_state() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.calc_satliq_state"]], "calc_state() (vclibpy.media.coolprop method)": [[10, "vclibpy.media.CoolProp.calc_state"]], "calc_state() (vclibpy.media.medprop method)": [[10, "vclibpy.media.MedProp.calc_state"]], "calc_state() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.calc_state"]], "calc_state() (vclibpy.media.cool_prop.coolprop method)": [[10, "vclibpy.media.cool_prop.CoolProp.calc_state"]], "calc_state() (vclibpy.media.media.medprop method)": [[10, "vclibpy.media.media.MedProp.calc_state"]], "calc_state() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.calc_state"]], "calc_transport_properties() (vclibpy.media.coolprop method)": [[10, "vclibpy.media.CoolProp.calc_transport_properties"]], "calc_transport_properties() (vclibpy.media.medprop method)": [[10, "vclibpy.media.MedProp.calc_transport_properties"]], "calc_transport_properties() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.calc_transport_properties"]], "calc_transport_properties() (vclibpy.media.cool_prop.coolprop method)": [[10, "vclibpy.media.cool_prop.CoolProp.calc_transport_properties"]], "calc_transport_properties() (vclibpy.media.media.medprop method)": [[10, "vclibpy.media.media.MedProp.calc_transport_properties"]], "calc_transport_properties() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.calc_transport_properties"]], "get_available_substances() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_available_substances"]], "get_available_substances() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_available_substances"]], "get_comp_names() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_comp_names"]], "get_comp_names() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_comp_names"]], "get_critical_point() (vclibpy.media.coolprop method)": [[10, "vclibpy.media.CoolProp.get_critical_point"]], "get_critical_point() (vclibpy.media.medprop method)": [[10, "vclibpy.media.MedProp.get_critical_point"]], "get_critical_point() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_critical_point"]], "get_critical_point() (vclibpy.media.cool_prop.coolprop method)": [[10, "vclibpy.media.cool_prop.CoolProp.get_critical_point"]], "get_critical_point() (vclibpy.media.media.medprop method)": [[10, "vclibpy.media.media.MedProp.get_critical_point"]], "get_critical_point() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_critical_point"]], "get_def_limits() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_def_limits"]], "get_def_limits() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_def_limits"]], "get_dll_path() (vclibpy.media.refprop static method)": [[10, "vclibpy.media.RefProp.get_dll_path"]], "get_dll_path() (vclibpy.media.ref_prop.refprop static method)": [[10, "vclibpy.media.ref_prop.RefProp.get_dll_path"]], "get_fluid_name() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_fluid_name"]], "get_fluid_name() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_fluid_name"]], "get_gwp() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_gwp"]], "get_gwp() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_gwp"]], "get_longname() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_longname"]], "get_longname() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_longname"]], "get_mass_fraction() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_mass_fraction"]], "get_mass_fraction() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_mass_fraction"]], "get_mol_fraction() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_mol_fraction"]], "get_mol_fraction() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_mol_fraction"]], "get_molar_composition() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_molar_composition"]], "get_molar_composition() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_molar_composition"]], "get_molar_mass() (vclibpy.media.coolprop method)": [[10, "vclibpy.media.CoolProp.get_molar_mass"]], "get_molar_mass() (vclibpy.media.medprop method)": [[10, "vclibpy.media.MedProp.get_molar_mass"]], "get_molar_mass() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_molar_mass"]], "get_molar_mass() (vclibpy.media.cool_prop.coolprop method)": [[10, "vclibpy.media.cool_prop.CoolProp.get_molar_mass"]], "get_molar_mass() (vclibpy.media.media.medprop method)": [[10, "vclibpy.media.media.MedProp.get_molar_mass"]], "get_molar_mass() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_molar_mass"]], "get_nbp() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_nbp"]], "get_nbp() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_nbp"]], "get_odp() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_odp"]], "get_odp() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_odp"]], "get_pretty_print() (vclibpy.media.thermodynamicstate method)": [[10, "vclibpy.media.ThermodynamicState.get_pretty_print"]], "get_pretty_print() (vclibpy.media.transportproperties method)": [[10, "vclibpy.media.TransportProperties.get_pretty_print"]], "get_pretty_print() (vclibpy.media.states.thermodynamicstate method)": [[10, "vclibpy.media.states.ThermodynamicState.get_pretty_print"]], "get_pretty_print() (vclibpy.media.states.transportproperties method)": [[10, "vclibpy.media.states.TransportProperties.get_pretty_print"]], "get_safety() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_safety"]], "get_safety() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_safety"]], "get_sat_vap_pressure() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_sat_vap_pressure"]], "get_sat_vap_pressure() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_sat_vap_pressure"]], "get_triple_point() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_triple_point"]], "get_triple_point() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_triple_point"]], "get_two_phase_limits() (in module vclibpy.media.media)": [[10, "vclibpy.media.media.get_two_phase_limits"]], "get_two_phase_limits() (vclibpy.media.medprop method)": [[10, "vclibpy.media.MedProp.get_two_phase_limits"]], "get_two_phase_limits() (vclibpy.media.media.medprop method)": [[10, "vclibpy.media.media.MedProp.get_two_phase_limits"]], "get_version() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.get_version"]], "get_version() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.get_version"]], "is_mixture() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.is_mixture"]], "is_mixture() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.is_mixture"]], "set_error_flag() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.set_error_flag"]], "set_error_flag() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.set_error_flag"]], "set_warning_flag() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.set_warning_flag"]], "set_warning_flag() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.set_warning_flag"]], "terminate() (vclibpy.media.medprop method)": [[10, "vclibpy.media.MedProp.terminate"]], "terminate() (vclibpy.media.refprop method)": [[10, "vclibpy.media.RefProp.terminate"]], "terminate() (vclibpy.media.media.medprop method)": [[10, "vclibpy.media.media.MedProp.terminate"]], "terminate() (vclibpy.media.ref_prop.refprop method)": [[10, "vclibpy.media.ref_prop.RefProp.terminate"]], "vclibpy.media": [[10, "module-vclibpy.media"]], "vclibpy.media.cool_prop": [[10, "module-vclibpy.media.cool_prop"]], "vclibpy.media.media": [[10, "module-vclibpy.media.media"]], "vclibpy.media.ref_prop": [[10, "module-vclibpy.media.ref_prop"]], "vclibpy.media.states": [[10, "module-vclibpy.media.states"]], "calc_multiple_states() (in module vclibpy.utils.automation)": [[11, "vclibpy.utils.automation.calc_multiple_states"]], "full_factorial_map_generation() (in module vclibpy.utils.automation)": [[11, "vclibpy.utils.automation.full_factorial_map_generation"]], "merge_sdfs() (in module vclibpy.utils.sdf_)": [[11, "vclibpy.utils.sdf_.merge_sdfs"]], "nominal_design() (in module vclibpy.utils.nominal_design)": [[11, "vclibpy.utils.nominal_design.nominal_design"]], "plot_cycle() (in module vclibpy.utils.plotting)": [[11, "vclibpy.utils.plotting.plot_cycle"]], "plot_sdf_map() (in module vclibpy.utils.plotting)": [[11, "vclibpy.utils.plotting.plot_sdf_map"]], "print_states() (in module vclibpy.utils.printing)": [[11, "vclibpy.utils.printing.print_states"]], "save_to_sdf() (in module vclibpy.utils.sdf_)": [[11, "vclibpy.utils.sdf_.save_to_sdf"]], "sdf_to_csv() (in module vclibpy.utils.sdf_)": [[11, "vclibpy.utils.sdf_.sdf_to_csv"]], "set_axis_style() (in module vclibpy.utils.plotting)": [[11, "vclibpy.utils.plotting.set_axis_style"]], "vclibpy.utils": [[11, "module-vclibpy.utils"]], "vclibpy.utils.automation": [[11, "module-vclibpy.utils.automation"]], "vclibpy.utils.nominal_design": [[11, "module-vclibpy.utils.nominal_design"]], "vclibpy.utils.plotting": [[11, "module-vclibpy.utils.plotting"]], "vclibpy.utils.printing": [[11, "module-vclibpy.utils.printing"]], "vclibpy.utils.sdf_": [[11, "module-vclibpy.utils.sdf_"]]}})